<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

	<!-- ============== COLORS ============== -->
	<Color x:Key="NormalFgColor">#FFC9CCCF</Color>
	<Color x:Key="NormalBgColor">#FF4D555B</Color>
	<Color x:Key="NormalDarkBgColor">#FF464E53</Color>
	<Color x:Key="NormalBdColor">#FF31373A</Color>
	<Color x:Key="NormalDarkBdColor">#FF2F3437</Color>
	<Color x:Key="CheckBgColor">#FF38A3DC</Color>
	<Color x:Key="CheckBdColor">#FF54B3E5</Color>
	<Color x:Key="TrackBgColor">#FF383D42</Color>
	<Color x:Key="TrackBdColor">#FF2E3438</Color>
	<Color x:Key="TrackLightBdColor">#FF2E3338</Color>
	<Color x:Key="TrackDarkBdColor">#FF2C3135</Color>
	<Color x:Key="OverOverlay">#19CBEBFF</Color>
	<Color x:Key="OverFgColor">#FFF1F3F4</Color>
	<Color x:Key="PressOverlay">#4C47ACEB</Color>
	<Color x:Key="FocusColor">#FF0B3C60</Color>
	<Color x:Key="FocusGlowColor">#FF114C74</Color>
	<Color x:Key="FocusTransparentGlowColor">#00114C74</Color>
	<Color x:Key="FocusShineColor">#FF1B6F9C</Color>
	<Color x:Key="FocusTransparentShineColor">#001B6F9C</Color>
	<Color x:Key="DisabledOverlay">#1468757E</Color>
	<Color x:Key="DisabledFgColor">#FF939B9F</Color>
	<Color x:Key="DisabledCheckBgColor">#FF578EAC</Color>
	<Color x:Key="DisabledCheckBdColor">#FF6B9AB3</Color>

	<!-- ============== RAMPS ============== -->
	<GradientStopCollection x:Key="NormalBgRamp">
		<GradientStop Color="#FF545D63" Offset="0"/>
		<GradientStop Color="{StaticResource NormalBgColor}" Offset="0.5"/>
		<GradientStop Color="{StaticResource NormalDarkBgColor}" Offset="1"/>
	</GradientStopCollection>
	<GradientStopCollection x:Key="NormalBdRamp">
		<GradientStop Color="#FF33393D" Offset="0"/>
		<GradientStop Color="{StaticResource NormalBdColor}" Offset="0.5"/>
		<GradientStop Color="{StaticResource NormalDarkBdColor}" Offset="1"/>
	</GradientStopCollection>
	<GradientStopCollection x:Key="TrackBdRamp">
		<GradientStop Color="{StaticResource TrackLightBdColor}" Offset="0"/>
		<GradientStop Color="{StaticResource TrackBdColor}" Offset="0.5"/>
		<GradientStop Color="{StaticResource TrackDarkBdColor}" Offset="1"/>
	</GradientStopCollection>

	<!-- ============== BRUSHES ============== -->
	<SolidColorBrush x:Key="NormalFgBrush" Color="{StaticResource NormalFgColor}"/>
	<LinearGradientBrush x:Key="NormalBgBrush" EndPoint="0.5,1" StartPoint="0.5,0" GradientStops="{StaticResource NormalBgRamp}"/>
	<SolidColorBrush x:Key="NormalDarkBgBrush" Color="{StaticResource NormalDarkBgColor}"/>
	<LinearGradientBrush x:Key="NormalBdBrush" EndPoint="0.5,1" StartPoint="0.5,0" GradientStops="{StaticResource NormalBdRamp}"/>
	<SolidColorBrush x:Key="NormalDarkBdBrush" Color="{StaticResource NormalDarkBdColor}"/>
	<SolidColorBrush x:Key="TrackBgBrush" Color="{StaticResource TrackBgColor}"/>
	<LinearGradientBrush x:Key="TrackBdBrush" EndPoint="0.5,1" StartPoint="0.5,0" GradientStops="{StaticResource TrackBdRamp}"/>
	<SolidColorBrush x:Key="TrackLightBdBrush" Color="{StaticResource TrackLightBdColor}"/>
	<SolidColorBrush x:Key="TrackDarkBdBrush" Color="{StaticResource TrackDarkBdColor}"/>
	<SolidColorBrush x:Key="WindowBrush" Color="#FF3D4348"/>
	<SolidColorBrush x:Key="ToolTipFgBrush" Color="{StaticResource OverFgColor}"/>
	<SolidColorBrush x:Key="ToolTipBgBrush" Color="#FF466E87"/>
	<SolidColorBrush x:Key="ToolTipBdBrush" Color="#FF3A5E79"/>
	<SolidColorBrush x:Key="CaretBrush" Color="{StaticResource OverFgColor}"/>
	<SolidColorBrush x:Key="SelectionBrush" Color="{StaticResource CheckBgColor}"/>
	<SolidColorBrush x:Key="LinkNormalBrush" Color="{StaticResource CheckBgColor}"/>
	<SolidColorBrush x:Key="LinkOverBrush" Color="{StaticResource OverFgColor}"/>
	<SolidColorBrush x:Key="LinkDisabledBrush" Color="{StaticResource DisabledCheckBgColor}"/>


	<!-- ============== DEFAULT CONTROL STLYE ============== -->
	<Style x:Key="NoesisControlStyle">
		<Setter Property="Control.Background" Value="{StaticResource NormalBgBrush}"/>
		<Setter Property="Control.BorderBrush" Value="{StaticResource NormalBdBrush}"/>
		<Setter Property="Control.BorderThickness" Value="1"/>
		<Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
		<Setter Property="Control.VerticalContentAlignment" Value="Stretch"/>
		<Setter Property="Control.Padding" Value="0"/>
		<Setter Property="Control.IsTabStop" Value="True"/>
		<Setter Property="Control.OverridesDefaultStyle" Value="False"/>
	</Style>

	<Style TargetType="{x:Type Control}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="Background" Value="{x:Null}"/>
		<Setter Property="BorderBrush" Value="{x:Null}"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Control}">
					<Border
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						Padding="{TemplateBinding Padding}"/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="{x:Type ContentControl}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="Background" Value="{x:Null}"/>
		<Setter Property="BorderBrush" Value="{x:Null}"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ContentControl}">
					<Border
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						Padding="{TemplateBinding Padding}">
						<ContentPresenter
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="{x:Type HeaderedContentControl}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="Background" Value="{x:Null}"/>
		<Setter Property="BorderBrush" Value="{x:Null}"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type HeaderedContentControl}">
					<Border
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						Padding="{TemplateBinding Padding}">
						<StackPanel>
							<ContentPresenter ContentSource="Header"/>
							<ContentPresenter
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
						</StackPanel>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="{x:Type ItemsControl}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="Background" Value="{x:Null}"/>
		<Setter Property="BorderBrush" Value="{x:Null}"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ItemsControl}">
					<Border
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						Padding="{TemplateBinding Padding}">
						<ItemsPresenter />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="{x:Type HeaderedItemsControl}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="Background" Value="{x:Null}"/>
		<Setter Property="BorderBrush" Value="{x:Null}"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type HeaderedItemsControl}">
					<Border
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						Padding="{TemplateBinding Padding}">
						<StackPanel>
							<ContentPresenter ContentSource="Header"/>
							<ItemsPresenter />
						</StackPanel>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="{x:Type UserControl}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="Background" Value="{x:Null}"/>
		<Setter Property="BorderBrush" Value="{x:Null}"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type UserControl}">
					<Border
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						Padding="{TemplateBinding Padding}">
						<ContentPresenter
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- ============== LABEL ============== -->

	<!-- Label Style -->
	<Style TargetType="{x:Type Label}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderBrush" Value="Transparent"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="HorizontalContentAlignment" Value="Left"/>
		<Setter Property="VerticalContentAlignment" Value="Top"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Label}">
					<ControlTemplate.Resources>
						<Storyboard x:Key="OnDisabled">
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="ContentHost">
								<EasingColorKeyFrame KeyTime="0:0:0.1" Value="{StaticResource DisabledFgColor}"/>
							</ColorAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="OnEnabled">
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="ContentHost">
								<EasingColorKeyFrame KeyTime="0:0:0.1" Value="{StaticResource NormalFgColor}"/>
							</ColorAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<Border
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						Padding="{TemplateBinding Padding}">
						<ContentPresenter x:Name="ContentHost"
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
							<TextElement.Foreground>
								<SolidColorBrush Color="{StaticResource NormalFgColor}"/>
							</TextElement.Foreground>
						</ContentPresenter>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource OnEnabled}"/>
							</Trigger.ExitActions>
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource OnDisabled}"/>
							</Trigger.EnterActions>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<!-- ============== BUTTON ============== -->

	<!-- Button Template -->
	<ControlTemplate x:Key="ButtonTemplate" TargetType="{x:Type Button}">
		<Grid>
			<VisualStateManager.VisualStateGroups>
				<VisualStateGroup x:Name="CommonStates">
					<VisualStateGroup.Transitions>
						<VisualTransition GeneratedDuration="0:0:0.1" To="Disabled"/>
						<VisualTransition From="Disabled" GeneratedDuration="0:0:0.1"/>
						<VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
						<VisualTransition From="MouseOver" GeneratedDuration="0:0:0.3"/>
						<VisualTransition GeneratedDuration="0" To="Pressed"/>
						<VisualTransition From="Pressed" GeneratedDuration="0:0:0.2"/>
					</VisualStateGroup.Transitions>
					<VisualState x:Name="Normal"/>
					<VisualState x:Name="MouseOver">
						<Storyboard>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
								<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="ContentHost">
								<EasingColorKeyFrame KeyTime="0" Value="{StaticResource OverFgColor}"/>
							</ColorAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
					<VisualState x:Name="Pressed">
						<Storyboard>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
								<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="OverBorder">
								<EasingColorKeyFrame KeyTime="0" Value="{StaticResource PressOverlay}"/>
							</ColorAnimationUsingKeyFrames>
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="ContentHost">
								<EasingColorKeyFrame KeyTime="0" Value="{StaticResource OverFgColor}"/>
							</ColorAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
					<VisualState x:Name="Disabled">
						<Storyboard>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="DisabledBorder">
								<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="ContentHost">
								<EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledFgColor}"/>
							</ColorAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
				</VisualStateGroup>
				<VisualStateGroup x:Name="FocusStates">
					<VisualStateGroup.Transitions>
						<VisualTransition GeneratedDuration="0:0:0.1" To="Focused"/>
						<VisualTransition From="Focused" GeneratedDuration="0:0:0.3"/>
					</VisualStateGroup.Transitions>
					<VisualState x:Name="Unfocused"/>
					<VisualState x:Name="Focused">
						<Storyboard>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="FocusBorder">
								<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Control.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="FocusInnerBorder">
								<EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="FocusInnerBorder">
								<EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
				</VisualStateGroup>
			</VisualStateManager.VisualStateGroups>
			<Border x:Name="BaseBorder"
				Background="{TemplateBinding Background}"
				BorderBrush="{TemplateBinding BorderBrush}"
				BorderThickness="{TemplateBinding BorderThickness}"
				CornerRadius="1"/>
			<Border x:Name="OverBorder"
				BorderThickness="{TemplateBinding BorderThickness}"
				CornerRadius="1">
				<Border.Background>
					<SolidColorBrush Color="{StaticResource OverOverlay}" Opacity="0"/>
				</Border.Background>
			</Border>
			<Border x:Name="FocusBorder"
				BorderThickness="{TemplateBinding BorderThickness}"
				CornerRadius="1">
				<Border.BorderBrush>
					<SolidColorBrush Color="{StaticResource FocusColor}" Opacity="0"/>
				</Border.BorderBrush>
				<Border x:Name="FocusInnerBorder"
					BorderThickness="1"
					CornerRadius="0.01">
					<Border.Background>
						<SolidColorBrush Color="{StaticResource FocusGlowColor}" Opacity="0"/>
					</Border.Background>
					<Border.BorderBrush>
						<SolidColorBrush Color="{StaticResource FocusShineColor}" Opacity="0"/>
					</Border.BorderBrush>
				</Border>
			</Border>
			<Border x:Name="DisabledBorder"
				CornerRadius="1.5">
				<Border.Background>
					<SolidColorBrush Color="{StaticResource DisabledOverlay}" Opacity="0"/>
				</Border.Background>
			</Border>
			<Border
				BorderThickness="{TemplateBinding BorderThickness}"
				Padding="{TemplateBinding Padding}">
				<ContentPresenter x:Name="ContentHost"
					HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
					VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
					<TextElement.Foreground>
						<SolidColorBrush Color="{StaticResource NormalFgColor}"/>
					</TextElement.Foreground>
				</ContentPresenter>
			</Border>
		</Grid>
	</ControlTemplate>

	<!-- Button Style -->
	<Style TargetType="{x:Type Button}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="Padding" Value="6,4"/>
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="Template" Value="{StaticResource ButtonTemplate}"/>
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
	</Style>


	<!-- ============== REPEAT BUTTON ============== -->

	<!-- RepeatButton Template -->
	<ControlTemplate x:Key="RepeatButtonTemplate" TargetType="{x:Type RepeatButton}">
		<Grid>
			<VisualStateManager.VisualStateGroups>
				<VisualStateGroup x:Name="CommonStates">
					<VisualStateGroup.Transitions>
						<VisualTransition GeneratedDuration="0:0:0.1" To="Disabled"/>
						<VisualTransition From="Disabled" GeneratedDuration="0:0:0.1"/>
						<VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
						<VisualTransition From="MouseOver" GeneratedDuration="0:0:0.3"/>
						<VisualTransition GeneratedDuration="0" To="Pressed"/>
						<VisualTransition From="Pressed" GeneratedDuration="0:0:0.2"/>
					</VisualStateGroup.Transitions>
					<VisualState x:Name="Normal"/>
					<VisualState x:Name="MouseOver">
						<Storyboard>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
								<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="ContentHost">
								<EasingColorKeyFrame KeyTime="0" Value="{StaticResource OverFgColor}"/>
							</ColorAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
					<VisualState x:Name="Pressed">
						<Storyboard>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
								<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="OverBorder">
								<EasingColorKeyFrame KeyTime="0" Value="{StaticResource PressOverlay}"/>
							</ColorAnimationUsingKeyFrames>
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="ContentHost">
								<EasingColorKeyFrame KeyTime="0" Value="{StaticResource OverFgColor}"/>
							</ColorAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
					<VisualState x:Name="Disabled">
						<Storyboard>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="DisabledBorder">
								<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="ContentHost">
								<EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledFgColor}"/>
							</ColorAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
				</VisualStateGroup>
				<VisualStateGroup x:Name="FocusStates">
					<VisualStateGroup.Transitions>
						<VisualTransition GeneratedDuration="0:0:0.1" To="Focused"/>
						<VisualTransition From="Focused" GeneratedDuration="0:0:0.3"/>
					</VisualStateGroup.Transitions>
					<VisualState x:Name="Unfocused"/>
					<VisualState x:Name="Focused">
						<Storyboard>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="FocusBorder">
								<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Control.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="FocusInnerBorder">
								<EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="FocusInnerBorder">
								<EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
				</VisualStateGroup>
			</VisualStateManager.VisualStateGroups>
			<Border x:Name="BaseBorder"
				Background="{TemplateBinding Background}"
				BorderBrush="{TemplateBinding BorderBrush}"
				BorderThickness="{TemplateBinding BorderThickness}"
				CornerRadius="1"/>
			<Border x:Name="OverBorder"
				BorderThickness="{TemplateBinding BorderThickness}"
				CornerRadius="1">
				<Border.Background>
					<SolidColorBrush Color="{StaticResource OverOverlay}" Opacity="0"/>
				</Border.Background>
			</Border>
			<Border x:Name="FocusBorder"
				BorderThickness="{TemplateBinding BorderThickness}"
				CornerRadius="1">
				<Border.BorderBrush>
					<SolidColorBrush Color="{StaticResource FocusColor}" Opacity="0"/>
				</Border.BorderBrush>
				<Border x:Name="FocusInnerBorder"
					BorderThickness="1"
					CornerRadius="0.01">
					<Border.Background>
						<SolidColorBrush Color="{StaticResource FocusGlowColor}" Opacity="0"/>
					</Border.Background>
					<Border.BorderBrush>
						<SolidColorBrush Color="{StaticResource FocusShineColor}" Opacity="0"/>
					</Border.BorderBrush>
				</Border>
			</Border>
			<Border x:Name="DisabledBorder"
				CornerRadius="1.5">
				<Border.Background>
					<SolidColorBrush Color="{StaticResource DisabledOverlay}" Opacity="0"/>
				</Border.Background>
			</Border>
			<Border
				BorderThickness="{TemplateBinding BorderThickness}"
				Padding="{TemplateBinding Padding}">
				<ContentPresenter x:Name="ContentHost"
					HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
					VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
					<TextElement.Foreground>
						<SolidColorBrush Color="{StaticResource NormalFgColor}"/>
					</TextElement.Foreground>
				</ContentPresenter>
			</Border>
		</Grid>
	</ControlTemplate>

	<!-- RepeatButton Style -->
	<Style TargetType="{x:Type RepeatButton}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="Padding" Value="6,4"/>
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="Template" Value="{StaticResource RepeatButtonTemplate}"/>
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
	</Style>


	<!-- ============== TOGGLE BUTTON ============== -->

	<!-- ToggleButton Template -->
	<ControlTemplate x:Key="ToggleButtonTemplate" TargetType="{x:Type ToggleButton}">
		<Grid>
			<VisualStateManager.VisualStateGroups>
				<VisualStateGroup x:Name="CommonStates">
					<VisualStateGroup.Transitions>
						<VisualTransition GeneratedDuration="0:0:0.1" To="Disabled"/>
						<VisualTransition From="Disabled" GeneratedDuration="0:0:0.1"/>
						<VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
						<VisualTransition From="MouseOver" GeneratedDuration="0:0:0.3"/>
						<VisualTransition GeneratedDuration="0" To="Pressed"/>
						<VisualTransition From="Pressed" GeneratedDuration="0:0:0.2"/>
					</VisualStateGroup.Transitions>
					<VisualState x:Name="Normal"/>
					<VisualState x:Name="MouseOver">
						<Storyboard>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
								<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="ContentHost">
								<EasingColorKeyFrame KeyTime="0" Value="{StaticResource OverFgColor}"/>
							</ColorAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
					<VisualState x:Name="Pressed">
						<Storyboard>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
								<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="OverBorder">
								<EasingColorKeyFrame KeyTime="0" Value="{StaticResource PressOverlay}"/>
							</ColorAnimationUsingKeyFrames>
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="ContentHost">
								<EasingColorKeyFrame KeyTime="0" Value="{StaticResource OverFgColor}"/>
							</ColorAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
					<VisualState x:Name="Disabled">
						<Storyboard>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="DisabledBorder">
								<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="ContentHost">
								<EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledFgColor}"/>
							</ColorAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
				</VisualStateGroup>
				<VisualStateGroup x:Name="FocusStates">
					<VisualStateGroup.Transitions>
						<VisualTransition GeneratedDuration="0:0:0.1" To="Focused"/>
						<VisualTransition From="Focused" GeneratedDuration="0:0:0.3"/>
					</VisualStateGroup.Transitions>
					<VisualState x:Name="Unfocused"/>
					<VisualState x:Name="Focused">
						<Storyboard>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="FocusBorder">
								<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Control.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="FocusInnerBorder">
								<EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="FocusInnerBorder">
								<EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
				</VisualStateGroup>
				<VisualStateGroup x:Name="CheckStates">
					<VisualStateGroup.Transitions>
						<VisualTransition GeneratedDuration="0:0:0.1" To="Checked"/>
						<VisualTransition GeneratedDuration="0:0:0.1" To="Indeterminate"/>
						<VisualTransition From="Checked" GeneratedDuration="0:0:0.3"/>
						<VisualTransition From="Indeterminate" GeneratedDuration="0:0:0.3"/>
					</VisualStateGroup.Transitions>
					<VisualState x:Name="Checked">
						<Storyboard>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="CheckBorder">
								<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
					<VisualState x:Name="Unchecked"/>
					<VisualState x:Name="Indeterminate">
						<Storyboard>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="CheckBorder">
								<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="CheckBorder">
								<EasingDoubleKeyFrame KeyTime="0" Value="0.8"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
				</VisualStateGroup>
			</VisualStateManager.VisualStateGroups>
			<Border x:Name="BaseBorder"
				Background="{TemplateBinding Background}"
				BorderBrush="{TemplateBinding BorderBrush}"
				BorderThickness="{TemplateBinding BorderThickness}"
				CornerRadius="1"/>
			<Border x:Name="OverBorder"
				BorderThickness="{TemplateBinding BorderThickness}"
				CornerRadius="1">
				<Border.Background>
					<SolidColorBrush Color="{StaticResource OverOverlay}" Opacity="0"/>
				</Border.Background>
			</Border>
			<Border x:Name="CheckBorder"
				Margin="{TemplateBinding BorderThickness}"
				BorderThickness="1"
				CornerRadius="0.01">
				<Border.Background>
					<SolidColorBrush Color="{StaticResource CheckBgColor}" Opacity="0"/>
				</Border.Background>
				<Border.BorderBrush>
					<SolidColorBrush Color="{StaticResource CheckBdColor}" Opacity="0"/>
				</Border.BorderBrush>
			</Border>
			<Border x:Name="FocusBorder"
				BorderThickness="{TemplateBinding BorderThickness}"
				CornerRadius="1">
				<Border.BorderBrush>
					<SolidColorBrush Color="{StaticResource FocusColor}" Opacity="0"/>
				</Border.BorderBrush>
				<Border x:Name="FocusInnerBorder"
					BorderThickness="1"
					CornerRadius="0.01">
					<Border.Background>
						<SolidColorBrush Color="{StaticResource FocusGlowColor}" Opacity="0"/>
					</Border.Background>
					<Border.BorderBrush>
						<SolidColorBrush Color="{StaticResource FocusShineColor}" Opacity="0"/>
					</Border.BorderBrush>
				</Border>
			</Border>
			<Border x:Name="DisabledBorder"
				CornerRadius="1.5">
				<Border.Background>
					<SolidColorBrush Color="{StaticResource DisabledOverlay}" Opacity="0"/>
				</Border.Background>
			</Border>
			<Border
				BorderThickness="{TemplateBinding BorderThickness}"
				Padding="{TemplateBinding Padding}">
				<ContentPresenter x:Name="ContentHost"
					HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
					VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
					<TextElement.Foreground>
						<SolidColorBrush Color="{StaticResource NormalFgColor}"/>
					</TextElement.Foreground>
				</ContentPresenter>
			</Border>
		</Grid>
	</ControlTemplate>

	<!-- ToggleButton Style -->
	<Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="Padding" Value="6,4"/>
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="Template" Value="{StaticResource ToggleButtonTemplate}"/>
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
	</Style>


	<!-- ============== RADIO BUTTON ============== -->

	<!-- RadioButton Template -->
	<ControlTemplate x:Key="RadioButtonTemplate" TargetType="{x:Type RadioButton}">
		<BulletDecorator Background="{TemplateBinding Background}">
			<BulletDecorator.Bullet>
				<Grid Width="15" Height="15" UseLayoutRounding="False">
					<Ellipse x:Name="BaseEllipse"
						Fill="{StaticResource NormalBgBrush}"
						Stroke="{StaticResource NormalBdBrush}"
						StrokeThickness="1"/>
					<Ellipse x:Name="OverEllipse"
						Margin="1">
						<Ellipse.Fill>
							<SolidColorBrush Color="{StaticResource OverOverlay}" Opacity="0"/>
						</Ellipse.Fill>
					</Ellipse>
					<Ellipse x:Name="DisabledEllipse" StrokeThickness="0">
						<Ellipse.Fill>
							<SolidColorBrush Color="{StaticResource DisabledOverlay}" Opacity="0"/>
						</Ellipse.Fill>
					</Ellipse>
					<Ellipse x:Name="CheckEllipse" StrokeThickness="1"
						Margin="3">
						<Ellipse.Fill>
							<SolidColorBrush Color="{StaticResource CheckBgColor}" Opacity="0"/>
						</Ellipse.Fill>
						<Ellipse.Stroke>
							<SolidColorBrush Color="{StaticResource CheckBdColor}" Opacity="0"/>
						</Ellipse.Stroke>
					</Ellipse>
					<Ellipse x:Name="FocusEllipse">
						<Ellipse.Stroke>
							<SolidColorBrush Color="{StaticResource FocusColor}" Opacity="0"/>
						</Ellipse.Stroke>
					</Ellipse>
					<Ellipse x:Name="FocusInnerEllipse" Margin="1">
						<Ellipse.Fill>
							<SolidColorBrush Color="{StaticResource FocusGlowColor}" Opacity="0"/>
						</Ellipse.Fill>
						<Ellipse.Stroke>
							<SolidColorBrush Color="{StaticResource FocusShineColor}" Opacity="0"/>
						</Ellipse.Stroke>
					</Ellipse>
				</Grid>
			</BulletDecorator.Bullet>
			<VisualStateManager.VisualStateGroups>
				<VisualStateGroup x:Name="CommonStates">
					<VisualStateGroup.Transitions>
						<VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
						<VisualTransition From="MouseOver" GeneratedDuration="0:0:0.3"/>
						<VisualTransition GeneratedDuration="0" To="Pressed"/>
						<VisualTransition From="Pressed" GeneratedDuration="0:0:0.2"/>
						<VisualTransition GeneratedDuration="0:0:0.1" To="Disabled"/>
						<VisualTransition From="Disabled" GeneratedDuration="0:0:0.1"/>
					</VisualStateGroup.Transitions>
					<VisualState x:Name="Normal"/>
					<VisualState x:Name="MouseOver">
						<Storyboard>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(Brush.Opacity)" Storyboard.TargetName="OverEllipse">
								<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="ContentHost">
								<EasingColorKeyFrame KeyTime="0" Value="{StaticResource OverFgColor}"/>
							</ColorAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
					<VisualState x:Name="Pressed">
						<Storyboard>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(Brush.Opacity)" Storyboard.TargetName="OverEllipse">
								<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="OverEllipse">
								<EasingColorKeyFrame KeyTime="0" Value="{StaticResource PressOverlay}"/>
							</ColorAnimationUsingKeyFrames>
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="ContentHost">
								<EasingColorKeyFrame KeyTime="0" Value="{StaticResource OverFgColor}"/>
							</ColorAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
					<VisualState x:Name="Disabled">
						<Storyboard>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(Brush.Opacity)" Storyboard.TargetName="DisabledEllipse">
								<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="ContentHost">
								<EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledFgColor}"/>
							</ColorAnimationUsingKeyFrames>
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="CheckEllipse">
								<EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledCheckBgColor}"/>
							</ColorAnimationUsingKeyFrames>
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Stroke).(SolidColorBrush.Color)" Storyboard.TargetName="CheckEllipse">
								<EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledCheckBdColor}"/>
							</ColorAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
				</VisualStateGroup>
				<VisualStateGroup x:Name="FocusStates">
					<VisualStateGroup.Transitions>
						<VisualTransition GeneratedDuration="0:0:0.1" To="Focused"/>
						<VisualTransition From="Focused" GeneratedDuration="0:0:0.3"/>
					</VisualStateGroup.Transitions>
					<VisualState x:Name="Unfocused"/>
					<VisualState x:Name="Focused">
						<Storyboard>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Stroke).(Brush.Opacity)" Storyboard.TargetName="FocusEllipse">
								<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Stroke).(Brush.Opacity)" Storyboard.TargetName="FocusInnerEllipse">
								<EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(Brush.Opacity)" Storyboard.TargetName="FocusInnerEllipse">
								<EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
				</VisualStateGroup>
				<VisualStateGroup x:Name="CheckStates">
					<VisualStateGroup.Transitions>
						<VisualTransition GeneratedDuration="0:0:0.1" To="Checked"/>
						<VisualTransition From="Checked" GeneratedDuration="0:0:0.3"/>
						<VisualTransition GeneratedDuration="0:0:0.1" To="Indeterminate"/>
						<VisualTransition From="Indeterminate" GeneratedDuration="0:0:0.3"/>
					</VisualStateGroup.Transitions>
					<VisualState x:Name="Checked">
						<Storyboard>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(Brush.Opacity)" Storyboard.TargetName="CheckEllipse">
								<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Stroke).(Brush.Opacity)" Storyboard.TargetName="CheckEllipse">
								<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
					<VisualState x:Name="Unchecked"/>
					<VisualState x:Name="Indeterminate">
						<Storyboard>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Stroke).(Brush.Opacity)" Storyboard.TargetName="CheckEllipse">
								<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
				</VisualStateGroup>
			</VisualStateManager.VisualStateGroups>
			<ContentPresenter x:Name="ContentHost"
				Margin="{TemplateBinding Padding}"
				HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
				VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
				<TextElement.Foreground>
					<SolidColorBrush Color="{StaticResource NormalFgColor}"/>
				</TextElement.Foreground>
			</ContentPresenter>
		</BulletDecorator>
	</ControlTemplate>

	<!-- RadioButton Style -->
	<Style TargetType="{x:Type RadioButton}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="Padding" Value="4,0,0,0"/>
		<Setter Property="HorizontalContentAlignment" Value="Left"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="Template" Value="{StaticResource RadioButtonTemplate}"/>
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
	</Style>


	<!-- ============== CHECK BOX ============== -->

	<!-- CheckBox Template -->
	<ControlTemplate x:Key="CheckBoxTemplate" TargetType="{x:Type CheckBox}">
		<BulletDecorator Background="{TemplateBinding Background}">
			<BulletDecorator.Bullet>
				<Grid Width="15" Height="15" UseLayoutRounding="False">
					<Border x:Name="BaseBorder"
						Background="{StaticResource NormalBgBrush}"
						BorderBrush="{StaticResource NormalBdBrush}"
						BorderThickness="1"/>
					<Border x:Name="OverBorder"
						Margin="1">
						<Border.Background>
							<SolidColorBrush Color="{StaticResource OverOverlay}" Opacity="0"/>
						</Border.Background>
					</Border>
					<Border x:Name="DisabledBorder">
						<Border.Background>
							<SolidColorBrush Color="{StaticResource DisabledOverlay}" Opacity="0"/>
						</Border.Background>
					</Border>
					<Border x:Name="MarkBorder"
						BorderThickness="1"
						Margin="3">
						<Border.Background>
							<SolidColorBrush Color="{StaticResource CheckBgColor}" Opacity="0"/>
						</Border.Background>
						<Border.BorderBrush>
							<SolidColorBrush Color="{StaticResource CheckBdColor}" Opacity="0"/>
						</Border.BorderBrush>
						<Path x:Name="CheckMark"
							Data="M0,6 L3,9 9,0 6,0 3,6 0,3 Z"
							Stretch="Fill"
							StrokeThickness="0.25"
							Margin="-1">
							<Path.Fill>
								<SolidColorBrush Color="{StaticResource CheckBgColor}" Opacity="0"/>
							</Path.Fill>
							<Path.Stroke>
								<SolidColorBrush Color="{StaticResource CheckBdColor}" Opacity="0"/>
							</Path.Stroke>
						</Path>
					</Border>
					<Border x:Name="FocusBorder" BorderThickness="1">
						<Border.BorderBrush>
							<SolidColorBrush Color="{StaticResource FocusColor}" Opacity="0"/>
						</Border.BorderBrush>
						<Border x:Name="FocusInnerBorder" BorderThickness="1">
							<Border.Background>
								<SolidColorBrush Color="{StaticResource FocusGlowColor}" Opacity="0"/>
							</Border.Background>
							<Border.BorderBrush>
								<SolidColorBrush Color="{StaticResource FocusShineColor}" Opacity="0"/>
							</Border.BorderBrush>
						</Border>
					</Border>
				</Grid>
			</BulletDecorator.Bullet>
			<VisualStateManager.VisualStateGroups>
				<VisualStateGroup x:Name="CommonStates">
					<VisualStateGroup.Transitions>
						<VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
						<VisualTransition From="MouseOver" GeneratedDuration="0:0:0.3"/>
						<VisualTransition GeneratedDuration="0" To="Pressed"/>
						<VisualTransition From="Pressed" GeneratedDuration="0:0:0.2"/>
						<VisualTransition GeneratedDuration="0:0:0.1" To="Disabled"/>
						<VisualTransition From="Disabled" GeneratedDuration="0:0:0.1"/>
					</VisualStateGroup.Transitions>
					<VisualState x:Name="Normal"/>
					<VisualState x:Name="MouseOver">
						<Storyboard>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
								<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="ContentHost">
								<EasingColorKeyFrame KeyTime="0" Value="{StaticResource OverFgColor}"/>
							</ColorAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
					<VisualState x:Name="Pressed">
						<Storyboard>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
								<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="OverBorder">
								<EasingColorKeyFrame KeyTime="0" Value="{StaticResource PressOverlay}"/>
							</ColorAnimationUsingKeyFrames>
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="ContentHost">
								<EasingColorKeyFrame KeyTime="0" Value="{StaticResource OverFgColor}"/>
							</ColorAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
					<VisualState x:Name="Disabled">
						<Storyboard>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="DisabledBorder">
								<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="ContentHost">
								<EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledFgColor}"/>
							</ColorAnimationUsingKeyFrames>
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="CheckMark">
								<EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledCheckBgColor}"/>
							</ColorAnimationUsingKeyFrames>
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Stroke).(SolidColorBrush.Color)" Storyboard.TargetName="CheckMark">
								<EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledCheckBdColor}"/>
							</ColorAnimationUsingKeyFrames>
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="MarkBorder">
								<EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledCheckBgColor}"/>
							</ColorAnimationUsingKeyFrames>
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" Storyboard.TargetName="MarkBorder">
								<EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledCheckBdColor}"/>
							</ColorAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
				</VisualStateGroup>
				<VisualStateGroup x:Name="FocusStates">
					<VisualStateGroup.Transitions>
						<VisualTransition GeneratedDuration="0:0:0.1" To="Focused"/>
						<VisualTransition From="Focused" GeneratedDuration="0:0:0.3"/>
					</VisualStateGroup.Transitions>
					<VisualState x:Name="Unfocused"/>
					<VisualState x:Name="Focused">
						<Storyboard>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="FocusBorder">
								<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="FocusInnerBorder">
								<EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="FocusInnerBorder">
								<EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
				</VisualStateGroup>
				<VisualStateGroup x:Name="CheckStates">
					<VisualStateGroup.Transitions>
						<VisualTransition GeneratedDuration="0:0:0.1" To="Checked"/>
						<VisualTransition From="Checked" GeneratedDuration="0:0:0.3"/>
						<VisualTransition GeneratedDuration="0:0:0.1" To="Indeterminate"/>
						<VisualTransition From="Indeterminate" GeneratedDuration="0:0:0.3"/>
					</VisualStateGroup.Transitions>
					<VisualState x:Name="Checked">
						<Storyboard>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(Brush.Opacity)" Storyboard.TargetName="CheckMark">
								<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Stroke).(Brush.Opacity)" Storyboard.TargetName="CheckMark">
								<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
					<VisualState x:Name="Unchecked"/>
					<VisualState x:Name="Indeterminate">
						<Storyboard>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="MarkBorder">
								<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="MarkBorder">
								<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
				</VisualStateGroup>
			</VisualStateManager.VisualStateGroups>
			<ContentPresenter x:Name="ContentHost"
				Margin="{TemplateBinding Padding}"
				HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
				VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
				<TextElement.Foreground>
					<SolidColorBrush Color="{StaticResource NormalFgColor}"/>
				</TextElement.Foreground>
			</ContentPresenter>
		</BulletDecorator>
	</ControlTemplate>
	 
	<!-- CheckBox Style -->
	<Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="Padding" Value="4,0,0,0"/>
		<Setter Property="HorizontalContentAlignment" Value="Left"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Template" Value="{StaticResource CheckBoxTemplate}"/>
	</Style>


	<!-- ============== SCROLL BAR ============== -->

	<!-- ScrollBarLineButton Style -->
	<Style x:Key="ScrollBarLineButton" TargetType="{x:Type RepeatButton}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="Focusable" Value="False"/>
		<Setter Property="ClickMode" Value="Press"/>
		<Setter Property="Delay" Value="250"/>
		<Setter Property="Interval" Value="100"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RepeatButton}">
					<Border x:Name="BaseBorder"
						Background="Transparent">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
									<VisualTransition From="MouseOver" GeneratedDuration="0:0:0.3"/>
									<VisualTransition GeneratedDuration="0" To="Pressed"/>
									<VisualTransition From="Pressed" GeneratedDuration="0:0:0.2"/>
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Normal"/>
								<VisualState x:Name="MouseOver">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(Brush.Opacity)" Storyboard.TargetName="CheckArrow">
											<EasingDoubleKeyFrame KeyTime="0" Value="0.5"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Pressed">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(Brush.Opacity)" Storyboard.TargetName="CheckArrow">
											<EasingDoubleKeyFrame KeyTime="0" Value="0.7"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Disabled"/>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Path x:Name="CheckArrow"
							Stretch="Fill"
							Margin="3"
							Data="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}" UseLayoutRounding="False">
							<Path.Fill>
								<SolidColorBrush Color="{StaticResource CheckBgColor}" Opacity="0"/>
							</Path.Fill>
						</Path>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- ScrollBarPageButton Style -->
	<Style x:Key="ScrollBarPageButton" TargetType="{x:Type RepeatButton}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="IsTabStop" Value="False"/>
		<Setter Property="Focusable" Value="False"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RepeatButton}">
					<Border Background="Transparent"/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- HorizontalScrollBarThumb Style -->
	<Style x:Key="HorizontalScrollBarThumb" TargetType="{x:Type Thumb}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="IsTabStop" Value="False"/>
		<Setter Property="Focusable" Value="False"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Grid>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
									<VisualTransition From="MouseOver" GeneratedDuration="0:0:0.3"/>
									<VisualTransition GeneratedDuration="0" To="Pressed"/>
									<VisualTransition From="Pressed" GeneratedDuration="0:0:0.2"/>
									<VisualTransition GeneratedDuration="0:0:0.2" To="Disabled"/>
									<VisualTransition From="Disabled" GeneratedDuration="0:0:0.2"/>
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Normal"/>
								<VisualState x:Name="MouseOver">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="DragBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="0.6"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Pressed">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="DragBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="0.9"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Disabled">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="DragBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="0"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Border x:Name="BaseBorder"
							Background="Transparent"/>
						<Border x:Name="DragBorder"
							CornerRadius="1"
							Margin="0,4">
							<Border.Background>
								<SolidColorBrush Color="{StaticResource CheckBgColor}" Opacity="0.3"/>
							</Border.Background>
						</Border>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- HorizontalScrollbar Template -->
	<ControlTemplate x:Key="HorizontalScrollBar" TargetType="{x:Type ScrollBar}">
		<Grid
			Background="Transparent"
			MinHeight="{TemplateBinding MaxHeight}"
			MaxHeight="{TemplateBinding MaxHeight}">
			<Grid.ColumnDefinitions>
				<ColumnDefinition MinWidth="{TemplateBinding MaxHeight}" MaxWidth="{TemplateBinding MaxHeight}"/>
				<ColumnDefinition Width="*"/>
				<ColumnDefinition MinWidth="{TemplateBinding MaxHeight}" MaxWidth="{TemplateBinding MaxHeight}"/>
			</Grid.ColumnDefinitions>
			<Track x:Name="PART_Track" Grid.Column="0" Grid.ColumnSpan="3" Margin="1,0" Orientation="Horizontal">
				<Track.DecreaseRepeatButton>
					<RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageLeftCommand"/>
				</Track.DecreaseRepeatButton>
				<Track.Thumb>
					<Thumb x:Name="Thumb" Style="{StaticResource HorizontalScrollBarThumb}" IsEnabled="False"/>
				</Track.Thumb>
				<Track.IncreaseRepeatButton>
					<RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageRightCommand"/>
				</Track.IncreaseRepeatButton>
			</Track>
			<RepeatButton x:Name="LeftLineButton"
				Grid.Column="0"
				Style="{StaticResource ScrollBarLineButton}"
				Command="ScrollBar.LineLeftCommand">
				<Geometry>M 4 0 L 4 8 L 0 4 Z</Geometry>
			</RepeatButton>
			<RepeatButton x:Name="RightLineButton"
				Grid.Column="2"
				Style="{StaticResource ScrollBarLineButton}"
				Command="ScrollBar.LineRightCommand">
				<Geometry>M 0 0 L 4 4 L 0 8 Z</Geometry>
			</RepeatButton>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter TargetName="Thumb" Property="IsEnabled" Value="True"/>
			</Trigger>
			<Trigger SourceName="LeftLineButton" Property="IsMouseOver" Value="True">
				<Setter TargetName="Thumb" Property="IsEnabled" Value="False"/>
			</Trigger>
			<Trigger SourceName="RightLineButton" Property="IsMouseOver" Value="True">
				<Setter TargetName="Thumb" Property="IsEnabled" Value="False"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!-- VerticalScrollBarThumb Style -->
	<Style x:Key="VerticalScrollBarThumb" TargetType="{x:Type Thumb}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="IsTabStop" Value="False"/>
		<Setter Property="Focusable" Value="False"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Grid>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
									<VisualTransition From="MouseOver" GeneratedDuration="0:0:0.3"/>
									<VisualTransition GeneratedDuration="0" To="Pressed"/>
									<VisualTransition From="Pressed" GeneratedDuration="0:0:0.2"/>
									<VisualTransition GeneratedDuration="0:0:0.2" To="Disabled"/>
									<VisualTransition From="Disabled" GeneratedDuration="0:0:0.2"/>
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Normal"/>
								<VisualState x:Name="MouseOver">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="DragBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="0.6"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Pressed">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="DragBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="0.9"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Disabled">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="DragBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="0"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Border x:Name="BaseBorder" Background="Transparent"/>
						<Border x:Name="DragBorder" CornerRadius="1" Margin="4,0">
							<Border.Background>
								<SolidColorBrush Color="{StaticResource CheckBgColor}" Opacity="0.3"/>
							</Border.Background>
						</Border>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- VerticalScrollBar Template -->
	<ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
		<Grid
			Background="Transparent"
			MinWidth="{TemplateBinding MaxWidth}"
			MaxWidth="{TemplateBinding MaxWidth}">
			<Grid.RowDefinitions>
				<RowDefinition MinHeight="{TemplateBinding MaxWidth}" MaxHeight="{TemplateBinding MaxWidth}"/>
				<RowDefinition Height="*"/>
				<RowDefinition MinHeight="{TemplateBinding MaxWidth}" MaxHeight="{TemplateBinding MaxWidth}"/>
			</Grid.RowDefinitions>
			<Track x:Name="PART_Track" Grid.Row="0" Grid.RowSpan="3" Margin="0,1" Orientation="Vertical" IsDirectionReversed="True">
				<Track.DecreaseRepeatButton>
					<RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageUpCommand"/>
				</Track.DecreaseRepeatButton>
				<Track.Thumb>
					<Thumb x:Name="Thumb" Style="{StaticResource VerticalScrollBarThumb}" IsEnabled="False"/>
				</Track.Thumb>
				<Track.IncreaseRepeatButton>
					<RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageDownCommand"/>
				</Track.IncreaseRepeatButton>
			</Track>
			<RepeatButton x:Name="UpLineButton"
				Grid.Row="0"
				Style="{StaticResource ScrollBarLineButton}"
				Command="ScrollBar.LineUpCommand">
				<Geometry>M 0 4 L 8 4 L 4 0 Z</Geometry>
			</RepeatButton>
			<RepeatButton x:Name="DownLineButton"
				Grid.Row="2"
				Style="{StaticResource ScrollBarLineButton}"
				Command="ScrollBar.LineDownCommand">
				<Geometry>M 0 0 L 4 4 L 8 0 Z</Geometry>
			</RepeatButton>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter TargetName="Thumb" Property="IsEnabled" Value="True"/>
			</Trigger>
			<Trigger SourceName="UpLineButton" Property="IsMouseOver" Value="True">
				<Setter TargetName="Thumb" Property="IsEnabled" Value="False"/>
			</Trigger>
			<Trigger SourceName="DownLineButton" Property="IsMouseOver" Value="True">
				<Setter TargetName="Thumb" Property="IsEnabled" Value="False"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!-- ScrollBar Style -->
	<Style TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource NoesisControlStyle}">
		<Style.Triggers>
			<Trigger Property="Orientation" Value="Horizontal">
				<Setter Property="MaxHeight" Value="15"/>
				<Setter Property="Template" Value="{StaticResource HorizontalScrollBar}"/>
			</Trigger>
			<Trigger Property="Orientation" Value="Vertical">
				<Setter Property="MaxWidth" Value="15"/>
				<Setter Property="Template" Value="{StaticResource VerticalScrollBar}"/>
			</Trigger>
		</Style.Triggers>
	</Style>


	<!-- ============== SCROLL VIEWER ============== -->

	<!-- ScrollViewer Style -->
	<Style TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="MinWidth" Value="15"/>
		<Setter Property="MinHeight" Value="15"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ScrollViewer}">
					<Grid Background="{TemplateBinding Background}">

						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*"/>
							<ColumnDefinition Width="Auto"/>
						</Grid.ColumnDefinitions>

						<Grid.RowDefinitions>
							<RowDefinition Height="*"/>
							<RowDefinition Height="Auto"/>
						</Grid.RowDefinitions>

						<ScrollContentPresenter
							Grid.Column="0"
							Grid.ColumnSpan="2"
							Grid.Row="0"
							Grid.RowSpan="2"
							Content="{TemplateBinding Content}"
							ContentTemplate="{TemplateBinding ContentTemplate}"
							ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
							CanContentScroll="{TemplateBinding CanContentScroll}"
							Margin="{TemplateBinding Padding}"/>

						<!-- The visibility of the ScrollBars is controlled by the implementation of the control -->
						<ScrollBar x:Name="PART_HorizontalScrollBar"
							Grid.Column="0"
							Grid.ColumnSpan="2"
							Grid.Row="1"
							Orientation="Horizontal"
							MaxHeight="{TemplateBinding MinHeight}"
							Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
							Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
							ViewportSize="{TemplateBinding ViewportWidth}"
							Minimum="0"
							Maximum="{TemplateBinding ScrollableWidth}"/>
						<ScrollBar x:Name="PART_VerticalScrollBar"
							Grid.Column="1"
							Grid.Row="0"
							Grid.RowSpan="2"
							Orientation="Vertical"
							MaxWidth="{TemplateBinding MinWidth}"
							Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
							Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
							ViewportSize="{TemplateBinding ViewportHeight}"
							Minimum="0"
							Maximum="{TemplateBinding ScrollableHeight}"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger SourceName="PART_HorizontalScrollBar" Property="IsMouseOver" Value="True">
							<Setter TargetName="PART_HorizontalScrollBar" Property="Panel.ZIndex" Value="1"/>
						</Trigger>
						<Trigger SourceName="PART_VerticalScrollBar" Property="IsMouseOver" Value="True">
							<Setter TargetName="PART_VerticalScrollBar" Property="Panel.ZIndex" Value="1"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<!-- ============== SLIDER ============== -->

	<!-- SliderButton Style -->
	<Style x:Key="SliderButtonStyle" TargetType="{x:Type RepeatButton}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="IsTabStop" Value="False"/>
		<Setter Property="Focusable" Value="False"/>
		<Setter Property="ClickMode" Value="Press"/>
		<Setter Property="Delay" Value="250"/>
		<Setter Property="Interval" Value="100"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RepeatButton}">
					<Border
						Background="Transparent"
						Padding="{TemplateBinding Padding}">
						<Border x:Name="CheckBorder"
							Background="{TemplateBinding Background}"/>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- SliderThumb Style -->
	<Style x:Key="SliderThumbStyle" TargetType="{x:Type Thumb}">
		<Setter Property="TabIndex" Value="-2"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<ControlTemplate.Resources>
						<Storyboard x:Key="FocusOn">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="FocusBorder">
								<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="FocusInnerBorder">
								<EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="FocusInnerBorder">
								<EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="FocusOff">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="FocusBorder">
								<EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="FocusInnerBorder">
								<EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="FocusInnerBorder">
								<EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<Grid>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
									<VisualTransition From="MouseOver" GeneratedDuration="0:0:0.3"/>
									<VisualTransition GeneratedDuration="0" To="Pressed"/>
									<VisualTransition From="Pressed" GeneratedDuration="0:0:0.2"/>
									<VisualTransition GeneratedDuration="0:0:0.1" To="Disabled"/>
									<VisualTransition From="Disabled" GeneratedDuration="0:0:0.1"/>
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Normal"/>
								<VisualState x:Name="MouseOver">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Pressed">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="OverBorder">
											<EasingColorKeyFrame KeyTime="0" Value="{StaticResource PressOverlay}"/>
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Disabled">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="DisabledBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Border x:Name="BaseBorder"
							Background="{StaticResource NormalBgBrush}"
							BorderBrush="{StaticResource NormalBdBrush}"
							BorderThickness="1"
							CornerRadius="1"/>
						<Border x:Name="OverBorder"
							BorderThickness="1"
							CornerRadius="1">
							<Border.Background>
								<SolidColorBrush Color="{StaticResource OverOverlay}" Opacity="0"/>
							</Border.Background>
						</Border>
						<Border x:Name="FocusBorder"
							CornerRadius="1"
							BorderThickness="1">
							<Border.BorderBrush>
								<SolidColorBrush Color="{StaticResource FocusColor}" Opacity="0"/>
							</Border.BorderBrush>
							<Border x:Name="FocusInnerBorder"
								BorderThickness="1"
								CornerRadius="0.01">
								<Border.Background>
									<SolidColorBrush Color="{StaticResource FocusGlowColor}" Opacity="0"/>
								</Border.Background>
								<Border.BorderBrush>
									<SolidColorBrush Color="{StaticResource FocusShineColor}" Opacity="0"/>
								</Border.BorderBrush>
							</Border>
						</Border>
						<Border x:Name="DisabledBorder"
							CornerRadius="1.5">
							<Border.Background>
								<SolidColorBrush Color="{StaticResource DisabledOverlay}" Opacity="0"/>
							</Border.Background>
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="TabIndex" Value="-1">
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource FocusOff}"/>
							</Trigger.ExitActions>
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource FocusOn}"/>
							</Trigger.EnterActions>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- HorizontalSlider Template -->
	<ControlTemplate x:Key="HorizontalSlider" TargetType="{x:Type Slider}">
		<Grid Background="{TemplateBinding Background}">
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto"/>
				<RowDefinition Height="*"/>
				<RowDefinition Height="Auto"/>
			</Grid.RowDefinitions>
			<VisualStateManager.VisualStateGroups>
				<VisualStateGroup x:Name="CommonStates">
					<VisualStateGroup.Transitions>
						<VisualTransition GeneratedDuration="0:0:0.1" To="Disabled"/>
						<VisualTransition From="Disabled" GeneratedDuration="0:0:0.1"/>
					</VisualStateGroup.Transitions>
					<VisualState x:Name="Normal"/>
					<VisualState x:Name="MouseOver"/>
					<VisualState x:Name="Disabled">
						<Storyboard>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(Brush.Opacity)" Storyboard.TargetName="DisabledTrackBg">
								<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="DecBtn">
								<EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledCheckBgColor}"/>
							</ColorAnimationUsingKeyFrames>
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TickBar.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="TopTick">
								<EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledFgColor}"/>
							</ColorAnimationUsingKeyFrames>
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TickBar.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="BottomTick">
								<EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledFgColor}"/>
							</ColorAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
				</VisualStateGroup>
			</VisualStateManager.VisualStateGroups>
			<TickBar x:Name="TopTick"
				Placement="Top"
				Height="4"
				Visibility="Collapsed" Margin="0,0,0,1">
				<TickBar.Fill>
					<SolidColorBrush Color="{StaticResource NormalFgColor}"/>
				</TickBar.Fill>
			</TickBar>
			<TickBar x:Name="BottomTick"
				Grid.Row="2"
				Placement="Bottom"
				Height="4"
				Visibility="Collapsed" Margin="0,1,0,0">
				<TickBar.Fill>
					<SolidColorBrush Color="{StaticResource NormalFgColor}"/>
				</TickBar.Fill>
			</TickBar>
			<Rectangle x:Name="TrackBg"
				Grid.Row="1"
				RadiusX="1" RadiusY="1"
				Margin="3,6"
				Fill="{StaticResource TrackBgBrush}"
				Stroke="{StaticResource TrackBdBrush}"/>
			<Rectangle x:Name="DisabledTrackBg"
				Grid.Row="1"
				RadiusX="1.5" RadiusY="1.5"
				Margin="3,6">
				<Rectangle.Fill>
					<SolidColorBrush Color="{StaticResource DisabledOverlay}" Opacity="0"/>
				</Rectangle.Fill>
			</Rectangle>
			<Track Grid.Row="1" x:Name="PART_Track">
				<Track.DecreaseRepeatButton>
					<RepeatButton x:Name="DecBtn"
						Style="{StaticResource SliderButtonStyle}"
						Padding="4,7,0,7"
						Command="Slider.DecreaseLarge">
						<RepeatButton.Background>
							<SolidColorBrush Color="{StaticResource CheckBgColor}"/>
						</RepeatButton.Background>
					</RepeatButton>
				</Track.DecreaseRepeatButton>
				<Track.Thumb>
					<Thumb x:Name="SliderThumb"
						Width="10"
						MinHeight="20"
						Style="{StaticResource SliderThumbStyle}"/>
				</Track.Thumb>
				<Track.IncreaseRepeatButton>
					<RepeatButton
						Style="{StaticResource SliderButtonStyle}"
						Command="Slider.IncreaseLarge"/>
				</Track.IncreaseRepeatButton>
			</Track>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsDirectionReversed" Value="True">
				<Setter Property="Padding" TargetName="DecBtn" Value="0,7,4,7"/>
			</Trigger>
			<Trigger Property="IsKeyboardFocused" Value="True">
				<Setter TargetName="SliderThumb" Property="TabIndex" Value="-1"/>
			</Trigger>
			<Trigger Property="TickPlacement" Value="TopLeft">
				<Setter TargetName="TopTick" Property="Visibility" Value="Visible"/>
			</Trigger>
			<Trigger Property="TickPlacement" Value="BottomRight">
				<Setter TargetName="BottomTick" Property="Visibility" Value="Visible"/>
			</Trigger>
			<Trigger Property="TickPlacement" Value="Both">
				<Setter TargetName="TopTick" Property="Visibility" Value="Visible"/>
				<Setter TargetName="BottomTick" Property="Visibility" Value="Visible"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!-- VerticalSlider Template -->
	<ControlTemplate x:Key="VerticalSlider" TargetType="{x:Type Slider}">
		<Grid Background="{TemplateBinding Background}">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="Auto"/>
				<ColumnDefinition Width="{TemplateBinding MinWidth}"/>
				<ColumnDefinition Width="Auto"/>
			</Grid.ColumnDefinitions>
			<VisualStateManager.VisualStateGroups>
				<VisualStateGroup x:Name="CommonStates">
					<VisualStateGroup.Transitions>
						<VisualTransition GeneratedDuration="0:0:0.1" To="Disabled"/>
						<VisualTransition From="Disabled" GeneratedDuration="0:0:0.1"/>
					</VisualStateGroup.Transitions>
					<VisualState x:Name="Normal"/>
					<VisualState x:Name="MouseOver"/>
					<VisualState x:Name="Disabled">
						<Storyboard>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(Brush.Opacity)" Storyboard.TargetName="DisabledTrackBg">
								<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="DecBtn">
								<EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledCheckBgColor}"/>
							</ColorAnimationUsingKeyFrames>
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TickBar.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="TopTick">
								<EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledFgColor}"/>
							</ColorAnimationUsingKeyFrames>
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TickBar.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="BottomTick">
								<EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledFgColor}"/>
							</ColorAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
				</VisualStateGroup>
			</VisualStateManager.VisualStateGroups>
			<TickBar x:Name="TopTick"
				Placement="Left"
				Width="4" Margin="0,0,1,0"
				Visibility="Collapsed">
				<TickBar.Fill>
					<SolidColorBrush Color="{StaticResource NormalFgColor}"/>
				</TickBar.Fill>
			</TickBar>
			<TickBar x:Name="BottomTick"
				Grid.Column="2"
				Placement="Right"
				Width="4" Margin="1,0,0,0"
				Visibility="Collapsed">
				<TickBar.Fill>
					<SolidColorBrush Color="{StaticResource NormalFgColor}"/>
				</TickBar.Fill>
			</TickBar>
			<Rectangle x:Name="TrackBg"
				Grid.Column="1"
				RadiusX="1" RadiusY="1"
				Margin="6,3"
				Fill="{StaticResource TrackBgBrush}"
				Stroke="{StaticResource TrackBdBrush}"/>
			<Rectangle x:Name="DisabledTrackBg"
				Grid.Column="1"
				RadiusX="1.5" RadiusY="1.5"
				Margin="6,3">
				<Rectangle.Fill>
					<SolidColorBrush Color="{StaticResource DisabledOverlay}" Opacity="0"/>
				</Rectangle.Fill>
			</Rectangle>
			<Track Grid.Column="1" x:Name="PART_Track" Orientation="Vertical">
				<Track.DecreaseRepeatButton>
					<RepeatButton x:Name="DecBtn"
						Style="{StaticResource SliderButtonStyle}"
						Padding="7,0,7,4"
						Command="Slider.DecreaseLarge" >
						<RepeatButton.Background>
							<SolidColorBrush Color="{StaticResource CheckBgColor}"/>
						</RepeatButton.Background>
					</RepeatButton>
				</Track.DecreaseRepeatButton>
				<Track.Thumb>
					<Thumb x:Name="SliderThumb"
						MinWidth="20"
						Height="10"
						Style="{StaticResource SliderThumbStyle}" />
				</Track.Thumb>
				<Track.IncreaseRepeatButton>
					<RepeatButton
						Style="{StaticResource SliderButtonStyle}"
						Command="Slider.IncreaseLarge" />
				</Track.IncreaseRepeatButton>
			</Track>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsDirectionReversed" Value="True">
				<Setter Property="Padding" TargetName="DecBtn" Value="7,4,7,0"/>
			</Trigger>
			<Trigger Property="IsKeyboardFocused" Value="True">
				<Setter TargetName="SliderThumb" Property="TabIndex" Value="-1"/>
			</Trigger>
			<Trigger Property="TickPlacement" Value="TopLeft">
				<Setter TargetName="TopTick" Property="Visibility" Value="Visible"/>
			</Trigger>
			<Trigger Property="TickPlacement" Value="BottomRight">
				<Setter TargetName="BottomTick" Property="Visibility" Value="Visible"/>
			</Trigger>
			<Trigger Property="TickPlacement" Value="Both">
				<Setter TargetName="TopTick" Property="Visibility" Value="Visible"/>
				<Setter TargetName="BottomTick" Property="Visibility" Value="Visible"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!-- Slider Style -->
	<Style TargetType="{x:Type Slider}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="Background" Value="Transparent"/>
		<Style.Triggers>
			<Trigger Property="Orientation" Value="Horizontal">
				<Setter Property="MinHeight" Value="20"/>
				<Setter Property="Template" Value="{StaticResource HorizontalSlider}" />
			</Trigger>
			<Trigger Property="Orientation" Value="Vertical">
				<Setter Property="MinWidth" Value="20"/>
				<Setter Property="Template" Value="{StaticResource VerticalSlider}" />
			</Trigger>
		</Style.Triggers>
	</Style>


	<!-- ============== PROGRESS BAR ============== -->

	<!-- ProgressBar Style -->
	<Style TargetType="{x:Type ProgressBar}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="Background" Value="{StaticResource TrackBgBrush}"/>
		<Setter Property="BorderBrush" Value="{StaticResource TrackBdBrush}"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="Padding" Value="1"/>
		<Setter Property="IsTabStop" Value="False"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ProgressBar}">
					<ControlTemplate.Resources>
						<Storyboard x:Key="OnIndeterminate" RepeatBehavior="Forever">
							<PointAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(LinearGradientBrush.StartPoint)" Storyboard.TargetName="IndicatorIndeterminate">
								<EasingPointKeyFrame KeyTime="0:0:1" Value="20,0"/>
							</PointAnimationUsingKeyFrames>
							<PointAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(LinearGradientBrush.EndPoint)" Storyboard.TargetName="IndicatorIndeterminate">
								<EasingPointKeyFrame KeyTime="0:0:1" Value="30,0"/>
							</PointAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="OffIndeterminate">
							<PointAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(LinearGradientBrush.StartPoint)" Storyboard.TargetName="IndicatorIndeterminate">
								<EasingPointKeyFrame KeyTime="0" Value="0,0"/>
							</PointAnimationUsingKeyFrames>
							<PointAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(LinearGradientBrush.EndPoint)" Storyboard.TargetName="IndicatorIndeterminate">
								<EasingPointKeyFrame KeyTime="0" Value="10,0"/>
							</PointAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="OnDisabled">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="DisabledTrack">
								<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="IndicatorBorder">
								<EasingColorKeyFrame KeyTime="0:0:0.1" Value="{StaticResource DisabledCheckBgColor}"/>
							</ColorAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="OnEnabled">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="DisabledTrack">
								<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="IndicatorBorder">
								<EasingColorKeyFrame KeyTime="0:0:0.1" Value="{StaticResource CheckBgColor}"/>
							</ColorAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<Grid>
						<Border x:Name="PART_Track"
							Background="{TemplateBinding Background}" 
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							CornerRadius="1"/>
						<Border x:Name="DisabledTrack"
							CornerRadius="1.5">
							<Border.Background>
								<SolidColorBrush Color="{StaticResource DisabledOverlay}" Opacity="0"/>
							</Border.Background>
						</Border>
						<Grid x:Name="PART_Indicator"
							HorizontalAlignment="Left">
							<Border x:Name="IndicatorBorder"
								Margin="{TemplateBinding Padding}">
								<Border.Background>
									<SolidColorBrush Color="{StaticResource CheckBgColor}"/>
								</Border.Background>
								<Border x:Name="IndicatorIndeterminate" Visibility="Collapsed">
									<Border.Background>
										<LinearGradientBrush StartPoint="0,0" EndPoint="10,0" MappingMode="Absolute" SpreadMethod="Reflect">
											<LinearGradientBrush.RelativeTransform>
												<RotateTransform CenterY="0.5" CenterX="0.5" Angle="3"/>
											</LinearGradientBrush.RelativeTransform>
											<GradientStop Color="#00252B32" Offset="0.4"/>
											<GradientStop Color="#A0252B32" Offset="1"/>
										</LinearGradientBrush>
									</Border.Background>
								</Border>
							</Border>
						</Grid>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsIndeterminate" Value="True">
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource OnIndeterminate}"/>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource OffIndeterminate}"/>
							</Trigger.ExitActions>
							<Setter Property="Visibility" TargetName="IndicatorIndeterminate" Value="Visible"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource OnEnabled}"/>
							</Trigger.ExitActions>
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource OnDisabled}"/>
							</Trigger.EnterActions>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<!-- ============== EXPANDER ============== -->

	<!-- ExpanderToggleButton Style -->
	<Style x:Key="ExpanderToggleButton" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="Focusable" Value="True"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Grid Background="Transparent"/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Expander Style -->
	<Style TargetType="{x:Type Expander}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="Background" Value="{StaticResource NormalDarkBgBrush}"/>
		<Setter Property="BorderBrush" Value="{StaticResource NormalDarkBdBrush}"/>
		<Setter Property="Padding" Value="4"/>
		<Setter Property="Focusable" Value="False"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Expander}">
					<ControlTemplate.Resources>
						<Storyboard x:Key="ExpanderMouseOverOn">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
								<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="Arrow">
								<EasingColorKeyFrame KeyTime="0:0:0.1" Value="{StaticResource CheckBdColor}"/>
							</ColorAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="ExpanderMouseOverOff">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
								<EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="Arrow">
								<EasingColorKeyFrame KeyTime="0:0:0.3" Value="{StaticResource CheckBgColor}"/>
							</ColorAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="ExpanderFocusedOn">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="FocusBorder">
								<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="FocusInnerBorder">
								<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.25"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="FocusInnerBorder">
								<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.25"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="ExpanderFocusedOff">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="FocusBorder">
								<EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="FocusInnerBorder">
								<EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="FocusInnerBorder">
								<EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<Grid>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto"/>
							<RowDefinition Height="*"/>
						</Grid.RowDefinitions>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0:0:0.1" To="Disabled"/>
									<VisualTransition From="Disabled" GeneratedDuration="0:0:0.1"/>
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Normal"/>
								<VisualState x:Name="MouseOver"/>
								<VisualState x:Name="Disabled">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="ContentDisabledBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="ContentHost">
											<EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledFgColor}"/>
										</ColorAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="HeaderDisabledBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="HeaderHost">
											<EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledFgColor}"/>
										</ColorAnimationUsingKeyFrames>
										<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="Arrow">
											<EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledCheckBgColor}"/>
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="ExpansionStates">
								<VisualStateGroup.Transitions>
									<VisualTransition From="Collapsed" GeneratedDuration="0" To="Expanded">
										<Storyboard>
											<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="ContentBorder">
												<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
											</ObjectAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)" Storyboard.TargetName="Arrow">
												<EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="-180"/>
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(ScaleTransform.ScaleY)" Storyboard.TargetName="ContentPanel">
												<EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1"/>
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames BeginTime="0:0:0.2" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="ContentPanel">
												<EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1"/>
											</DoubleAnimationUsingKeyFrames>
										</Storyboard>
									</VisualTransition>
									<VisualTransition From="Expanded" GeneratedDuration="0" To="Collapsed">
										<Storyboard>
											<ObjectAnimationUsingKeyFrames BeginTime="0:0:0.4" Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="ContentBorder">
												<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Hidden}"/>
											</ObjectAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames BeginTime="0:0:0.2" Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)" Storyboard.TargetName="Arrow">
												<EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames BeginTime="0:0:0.2" Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(ScaleTransform.ScaleY)" Storyboard.TargetName="ContentPanel">
												<EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0.01"/>
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="ContentPanel">
												<EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
											</DoubleAnimationUsingKeyFrames>
										</Storyboard>
									</VisualTransition>
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Expanded">
									<Storyboard>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="ContentBorder">
											<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
										</ObjectAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)" Storyboard.TargetName="Arrow">
											<EasingDoubleKeyFrame KeyTime="0" Value="-180"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(ScaleTransform.ScaleY)" Storyboard.TargetName="ContentPanel">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="ContentPanel">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Collapsed"/>
							</VisualStateGroup>
							<VisualStateGroup x:Name="FocusStates">
								<VisualState x:Name="Focused"/>
								<VisualState x:Name="Unfocused"/>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Border x:Name="BaseBorder"
							Background="{StaticResource NormalBgBrush}"
							BorderBrush="{StaticResource NormalBdBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							CornerRadius="1,1,0,0"/>
						<Border x:Name="TintBorder"
							Grid.Row="0"
							BorderThickness="{TemplateBinding BorderThickness}"
							CornerRadius="1,1,0,0">
							<Border.Background>
								<SolidColorBrush Color="{StaticResource CheckBgColor}" Opacity="0.15"/>
							</Border.Background>
						</Border>
						<Border x:Name="OverBorder"
							BorderThickness="{TemplateBinding BorderThickness}"
							CornerRadius="1,1,0,0">
							<Border.Background>
								<SolidColorBrush Color="{StaticResource OverOverlay}" Opacity="0"/>
							</Border.Background>
						</Border>
						<Border x:Name="FocusBorder"
							BorderThickness="1"
							CornerRadius="1,1,0,0">
							<Border.BorderBrush>
								<SolidColorBrush Color="{StaticResource FocusColor}" Opacity="0"/>
							</Border.BorderBrush>
							<Border x:Name="FocusInnerBorder"
								BorderThickness="1"
								CornerRadius="0.01,0.01,0,0">
								<Border.BorderBrush>
									<SolidColorBrush Color="{StaticResource FocusShineColor}" Opacity="0"/>
								</Border.BorderBrush>
								<Border.Background>
									<SolidColorBrush Color="{StaticResource FocusGlowColor}" Opacity="0"/>
								</Border.Background>
							</Border>
						</Border>
						<Border x:Name="HeaderDisabledBorder"
							CornerRadius="1.5,1.5,0,0">
							<Border.Background>
								<SolidColorBrush Color="{StaticResource DisabledOverlay}" Opacity="0"/>
							</Border.Background>
						</Border>
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="Auto"/>
								<ColumnDefinition Width="*"/>
							</Grid.ColumnDefinitions>
							<Grid
								Grid.Column="0"
								Width="15"
								Height="15"
								Margin="2,2,0,0"
								UseLayoutRounding="False">
								<Path x:Name="Arrow"
									Margin="3"
									Stretch="Fill"
									Data="M0,0 L8,0 4,4 Z"
									RenderTransformOrigin="0.5,0.4">
									<Path.Fill>
										<SolidColorBrush Color="{StaticResource CheckBgColor}"/>
									</Path.Fill>
									<Path.RenderTransform>
										<RotateTransform Angle="0"/>
									</Path.RenderTransform>
								</Path>
							</Grid>
							<Border Grid.Column="1" Margin="0" BorderThickness="{TemplateBinding BorderThickness}">
								<ContentPresenter x:Name="HeaderHost"
									Margin="0,3,3,3"
									ContentSource="Header">
									<TextElement.Foreground>
										<SolidColorBrush Color="{StaticResource NormalFgColor}"/>
									</TextElement.Foreground>
								</ContentPresenter>
							</Border>
						</Grid>
						<ToggleButton x:Name="ExpanderButton"
							Style="{StaticResource ExpanderToggleButton}"
							IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
						<Border x:Name="ContentBorder"
							Grid.Row="1"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="1,0,1,1"
							CornerRadius="0,0,1,1"
							Visibility="Hidden">
							<Grid x:Name="ContentPanel" Opacity="0">
								<Grid.LayoutTransform>
									<ScaleTransform ScaleY="0" CenterX="0.5" CenterY="0"/>
								</Grid.LayoutTransform>
								<Border x:Name="ContentDisabledBorder"
									Margin="-1,0,-1,-1"
									CornerRadius="0,0,1,1">
									<Border.Background>
										<SolidColorBrush Color="{StaticResource DisabledOverlay}" Opacity="0"/>
									</Border.Background>
								</Border>
								<ContentPresenter x:Name="ContentHost" Margin="{TemplateBinding Padding}">
									<TextElement.Foreground>
										<SolidColorBrush Color="{StaticResource NormalFgColor}"/>
									</TextElement.Foreground>
								</ContentPresenter>
							</Grid>
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsKeyboardFocused" Value="True" SourceName="ExpanderButton">
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource ExpanderFocusedOff}"/>
							</Trigger.ExitActions>
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource ExpanderFocusedOn}"/>
							</Trigger.EnterActions>
						</Trigger>
						<Trigger SourceName="ExpanderButton" Property="IsMouseOver" Value="True">
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource ExpanderMouseOverOff}"/>
							</Trigger.ExitActions>
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource ExpanderMouseOverOn}"/>
							</Trigger.EnterActions>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<!-- ============== GROUP BOX ============== -->

	<!-- GroupBox Style -->
	<Style TargetType="{x:Type GroupBox}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="Background" Value="{StaticResource NormalDarkBgBrush}"/>
		<Setter Property="BorderBrush" Value="{StaticResource NormalDarkBdBrush}"/>
		<Setter Property="Padding" Value="4"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type GroupBox}">
					<ControlTemplate.Resources>
						<Storyboard x:Key="OnDisabled">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="DisabledBackground">
								<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="DisabledBorder">
								<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="HeaderHost">
								<EasingColorKeyFrame KeyTime="0:0:0.1" Value="{StaticResource DisabledFgColor}"/>
							</ColorAnimationUsingKeyFrames>
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="ContentHost">
								<EasingColorKeyFrame KeyTime="0:0:0.1" Value="{StaticResource DisabledFgColor}"/>
							</ColorAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="OnEnabled">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="DisabledBackground">
								<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="DisabledBorder">
								<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="HeaderHost">
								<EasingColorKeyFrame KeyTime="0:0:0.1" Value="{StaticResource NormalFgColor}"/>
							</ColorAnimationUsingKeyFrames>
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="ContentHost">
								<EasingColorKeyFrame KeyTime="0:0:0.1" Value="{StaticResource NormalFgColor}"/>
							</ColorAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<Grid>
						<Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="1"/>
						<Border x:Name="DisabledBorder"
							Grid.Row="0"
							Grid.RowSpan="1"
							BorderThickness="{TemplateBinding BorderThickness}"
							CornerRadius="0,0,1,1">
							<Border.BorderBrush>
								<SolidColorBrush Color="{StaticResource DisabledOverlay}" Opacity="0"/>
							</Border.BorderBrush>
						</Border>
						<Grid Margin="{TemplateBinding BorderThickness}">
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto"/>
								<RowDefinition Height="*"/>
							</Grid.RowDefinitions>
							<Border x:Name="BaseHeader"
								Grid.Row="0"
								Background="{StaticResource NormalBgBrush}"
								CornerRadius="0.1,0.1,0,0" BorderThickness="0,0,0,1">
								<Border.BorderBrush>
									<SolidColorBrush Color="{StaticResource NormalBdColor}"/>
								</Border.BorderBrush>
							</Border>
							<Border x:Name="TintBorder"
								Grid.Row="0"
								CornerRadius="1,1,0,0" BorderThickness="0,0,0,1">
								<Border.Background>
									<SolidColorBrush Color="{StaticResource CheckBgColor}" Opacity="0.15"/>
								</Border.Background>
							</Border>
							<Border x:Name="BaseContent"
								Grid.Row="1"
								Background="{TemplateBinding Background}"
								CornerRadius="0,0,0.1,0.1"/>
							<Border x:Name="DisabledBackground"
								Grid.Row="0"
								Grid.RowSpan="2"
								CornerRadius="0.1,0.1,0.1,0.1">
								<Border.Background>
									<SolidColorBrush Color="{StaticResource DisabledOverlay}" Opacity="0"/>
								</Border.Background>
							</Border>
							<ContentPresenter
								Grid.Row="0"
								x:Name="HeaderHost"
								Margin="3,3,3,4"
								ContentSource="Header"
								HorizontalAlignment="Center">
								<TextElement.Foreground>
									<SolidColorBrush Color="{StaticResource NormalFgColor}"/>
								</TextElement.Foreground>
							</ContentPresenter>
							<ContentPresenter
								Grid.Row="1"
								x:Name="ContentHost"
								Margin="{TemplateBinding Padding}">
								<TextElement.Foreground>
									<SolidColorBrush Color="{StaticResource NormalFgColor}"/>
								</TextElement.Foreground>
							</ContentPresenter>
						</Grid>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource OnEnabled}"/>
							</Trigger.ExitActions>
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource OnDisabled}"/>
							</Trigger.EnterActions>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<!-- ============== LIST BOX ============== -->

	<!-- ListBox Style -->
	<Style TargetType="{x:Type ListBox}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="Background" Value="{StaticResource TrackBgBrush}"/>
		<Setter Property="BorderBrush" Value="{StaticResource TrackBdBrush}"/>
		<Setter Property="Focusable" Value="False"/>
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
		<Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
		<Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
		<Setter Property="VirtualizingPanel.VirtualizationMode" Value="Recycling"/>
		<Setter Property="VirtualizingPanel.ScrollUnit" Value="Pixel"/>
		<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListBox}">
					<ControlTemplate.Resources>
						<Storyboard x:Key="OnDisabled">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="DisabledBorder">
								<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="OnEnabled">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="DisabledBorder">
								<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<Grid>
						<Border x:Name="BaseBorder"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							CornerRadius="1"/>
						<Border x:Name="DisabledBorder"
							CornerRadius="1.5">
							<Border.Background>
								<SolidColorBrush Color="{StaticResource DisabledOverlay}" Opacity="0"/>
							</Border.Background>
						</Border>
						<Border
							BorderThickness="{TemplateBinding BorderThickness}">
							<ScrollViewer
								Focusable="False"
								Padding="{TemplateBinding Padding}"
								Foreground="{TemplateBinding Foreground}">
								<ItemsPresenter />
							</ScrollViewer>
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="false">
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource OnEnabled}"/>
							</Trigger.ExitActions>
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource OnDisabled}"/>
							</Trigger.EnterActions>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- ListBoxItem Style -->
	<Style TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderBrush" Value="Transparent"/>
		<Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
		<Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
		<Setter Property="Padding" Value="4"/>
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListBoxItem}">
					<Grid Margin="0,0,0,1">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
									<VisualTransition From="MouseOver" GeneratedDuration="0:0:0.3"/>
									<VisualTransition GeneratedDuration="0:0:0.1" To="Disabled"/>
									<VisualTransition From="Disabled" GeneratedDuration="0:0:0.1"/>
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Normal"/>
								<VisualState x:Name="MouseOver">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="ContentHost">
											<EasingColorKeyFrame KeyTime="0" Value="{StaticResource OverFgColor}"/>
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Disabled">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="DisabledBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="ContentHost">
											<EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledFgColor}"/>
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="SelectionStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0:0:0.1" To="Selected"/>
									<VisualTransition From="Selected" GeneratedDuration="0:0:0.3"/>
									<VisualTransition GeneratedDuration="0:0:0.1" To="SelectedUnfocused"/>
									<VisualTransition From="SelectedUnfocused" GeneratedDuration="0:0:0.3"/>
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Unselected"/>
								<VisualState x:Name="Selected">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="SelectBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="DisabledBorder">
											<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="SelectedUnfocused">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="SelectBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="0.8"/>
										</DoubleAnimationUsingKeyFrames>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="DisabledBorder">
											<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="FocusStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0:0:0.1" To="Focused"/>
									<VisualTransition From="Focused" GeneratedDuration="0:0:0.3"/>
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Unfocused"/>
								<VisualState x:Name="Focused">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="FocusBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="FocusBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Border x:Name="OverBorder">
							<Border.Background>
								<SolidColorBrush Color="{StaticResource OverOverlay}" Opacity="0"/>
							</Border.Background>
						</Border>
						<Border x:Name="SelectBorder">
							<Border.Background>
								<SolidColorBrush Color="{StaticResource PressOverlay}" Opacity="0"/>
							</Border.Background>
						</Border>
						<Border x:Name="FocusBorder"
							BorderThickness="1">
							<Border.Background>
								<SolidColorBrush Color="{StaticResource FocusGlowColor}" Opacity="0"/>
							</Border.Background>
							<Border.BorderBrush>
								<SolidColorBrush Color="{StaticResource FocusShineColor}" Opacity="0"/>
							</Border.BorderBrush>
						</Border>
						<Border x:Name="DisabledBorder" Visibility="Collapsed">
							<Border.Background>
								<SolidColorBrush Color="{StaticResource DisabledOverlay}" Opacity="0"/>
							</Border.Background>
						</Border>
						<Border x:Name="Border"
							BorderThickness="{TemplateBinding BorderThickness}"
							Padding="{TemplateBinding Padding}">
							<ContentPresenter x:Name="ContentHost"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
								<TextElement.Foreground>
									<SolidColorBrush Color="{StaticResource NormalFgColor}"/>
								</TextElement.Foreground>
							</ContentPresenter>
						</Border>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<!-- ============== MENU ============== -->

	<!-- Menu Style -->
	<Style TargetType="{x:Type Menu}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="Background" Value="{StaticResource TrackBgBrush}"/>
		<Setter Property="BorderBrush" Value="{x:Null}"/>
		<Setter Property="BorderThickness" Value="0"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Horizontal"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Menu}">
					<ControlTemplate.Resources>
						<Storyboard x:Key="OnDisabled">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="DisabledBorder">
								<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="OnEnabled">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="DisabledBorder">
								<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<Grid>
						<Border x:Name="BaseBorder"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"/>
						<Border x:Name="DisabledBorder">
							<Border.Background>
								<SolidColorBrush Color="{StaticResource DisabledOverlay}" Opacity="0"/>
							</Border.Background>
						</Border>
						<Border
							BorderThickness="{TemplateBinding BorderThickness}"
							Padding="{TemplateBinding Padding}">
							<ItemsPresenter/>
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource OnEnabled}"/>
							</Trigger.ExitActions>
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource OnDisabled}"/>
							</Trigger.EnterActions>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Separator Style -->
	<Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="OverridesDefaultStyle" Value="True"/>
		<Setter Property="Focusable" Value="false"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Separator}">
					<Rectangle x:Name="Bg" Height="1" Fill="{StaticResource TrackDarkBdBrush}"/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- TopLevelHeader Template -->
	<ControlTemplate x:Key="TopLevelHeaderTemplate" TargetType="{x:Type MenuItem}">
		<ControlTemplate.Resources>
			<Storyboard x:Key="HighlightOn">
				<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
					<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
				</DoubleAnimationUsingKeyFrames>
				<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="HeaderHost">
					<EasingColorKeyFrame KeyTime="0:0:0.1" Value="{StaticResource OverFgColor}"/>
				</ColorAnimationUsingKeyFrames>
			</Storyboard>
			<Storyboard x:Key="HighlightOff">
				<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
					<EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
				</DoubleAnimationUsingKeyFrames>
				<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="HeaderHost">
					<EasingColorKeyFrame KeyTime="0:0:0.3" Value="{StaticResource NormalFgColor}"/>
				</ColorAnimationUsingKeyFrames>
			</Storyboard>
			<Storyboard x:Key="OnDisabled">
				<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="HeaderHost">
					<EasingColorKeyFrame KeyTime="0:0:0.1" Value="{StaticResource DisabledFgColor}"/>
				</ColorAnimationUsingKeyFrames>
			</Storyboard>
			<Storyboard x:Key="OnEnabled">
				<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="HeaderHost">
					<EasingColorKeyFrame KeyTime="0:0:0.1" Value="{StaticResource NormalFgColor}"/>
				</ColorAnimationUsingKeyFrames>
			</Storyboard>
		</ControlTemplate.Resources>
		<Grid>
			<Border x:Name="BaseBorder"
				Background="{TemplateBinding Background}"
				BorderBrush="{TemplateBinding BorderBrush}"
				BorderThickness="{TemplateBinding BorderThickness}"/>
			<Border x:Name="OverBorder">
				<Border.Background>
					<SolidColorBrush Color="{StaticResource PressOverlay}" Opacity="0"/>
				</Border.Background>
			</Border>
			<Border x:Name="Header"
				BorderThickness="{TemplateBinding BorderThickness}"
				Padding="{TemplateBinding Padding}">
				<ContentPresenter x:Name="HeaderHost"
					ContentSource="Header"
					VerticalAlignment="Center">
					<TextElement.Foreground>
						<SolidColorBrush Color="{StaticResource NormalFgColor}"/>
					</TextElement.Foreground>
				</ContentPresenter>
			</Border>
			<Popup x:Name="Popup"
				AllowsTransparency="True"
				Focusable="False"
				IsOpen="{TemplateBinding IsSubmenuOpen}"
				Placement="Bottom"
				PopupAnimation="Fade">
				<Border x:Name="SubmenuBorder"
					BorderBrush="{StaticResource TrackBdBrush}"
					BorderThickness="1"
					CornerRadius="0,0,1,1">
					<Border.Background>
						<SolidColorBrush Color="{StaticResource TrackBgColor}" Opacity="0.95"/>
					</Border.Background>
					<ItemsPresenter/>
				</Border>
			</Popup>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsHighlighted" Value="true">
				<Trigger.ExitActions>
					<BeginStoryboard Storyboard="{StaticResource HighlightOff}"/>
				</Trigger.ExitActions>
				<Trigger.EnterActions>
					<BeginStoryboard Storyboard="{StaticResource HighlightOn}"/>
				</Trigger.EnterActions>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Trigger.ExitActions>
					<BeginStoryboard Storyboard="{StaticResource OnEnabled}"/>
				</Trigger.ExitActions>
				<Trigger.EnterActions>
					<BeginStoryboard Storyboard="{StaticResource OnDisabled}"/>
				</Trigger.EnterActions>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!-- TopLevelItem Template -->
	<ControlTemplate x:Key="TopLevelItemTemplate" TargetType="{x:Type MenuItem}">
		<ControlTemplate.Resources>
			<Storyboard x:Key="HighlightOn">
				<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
					<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
				</DoubleAnimationUsingKeyFrames>
				<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="HeaderHost">
					<EasingColorKeyFrame KeyTime="0:0:0.1" Value="{StaticResource OverFgColor}"/>
				</ColorAnimationUsingKeyFrames>
			</Storyboard>
			<Storyboard x:Key="HighlightOff">
				<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
					<EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
				</DoubleAnimationUsingKeyFrames>
				<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="HeaderHost">
					<EasingColorKeyFrame KeyTime="0:0:0.3" Value="{StaticResource NormalFgColor}"/>
				</ColorAnimationUsingKeyFrames>
			</Storyboard>
			<Storyboard x:Key="OnDisabled">
				<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="HeaderHost">
					<EasingColorKeyFrame KeyTime="0:0:0.1" Value="{StaticResource DisabledFgColor}"/>
				</ColorAnimationUsingKeyFrames>
			</Storyboard>
			<Storyboard x:Key="OnEnabled">
				<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="HeaderHost">
					<EasingColorKeyFrame KeyTime="0:0:0.1" Value="{StaticResource NormalFgColor}"/>
				</ColorAnimationUsingKeyFrames>
			</Storyboard>
		</ControlTemplate.Resources>
		<Grid>
			<Border x:Name="BaseBorder"
				Background="{TemplateBinding Background}"
				BorderBrush="{TemplateBinding BorderBrush}"
				BorderThickness="{TemplateBinding BorderThickness}"/>
			<Border x:Name="OverBorder">
				<Border.Background>
					<SolidColorBrush Color="{StaticResource PressOverlay}" Opacity="0"/>
				</Border.Background>
			</Border>
			<Border x:Name="Header"
				BorderThickness="{TemplateBinding BorderThickness}"
				Padding="{TemplateBinding Padding}">
				<ContentPresenter x:Name="HeaderHost"
					ContentSource="Header"
					VerticalAlignment="Center">
					<TextElement.Foreground>
						<SolidColorBrush Color="{StaticResource NormalFgColor}"/>
					</TextElement.Foreground>
				</ContentPresenter>
			</Border>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="IsHighlighted" Value="true">
				<Trigger.ExitActions>
					<BeginStoryboard Storyboard="{StaticResource HighlightOff}"/>
				</Trigger.ExitActions>
				<Trigger.EnterActions>
					<BeginStoryboard Storyboard="{StaticResource HighlightOn}"/>
				</Trigger.EnterActions>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Trigger.ExitActions>
					<BeginStoryboard Storyboard="{StaticResource OnEnabled}"/>
				</Trigger.ExitActions>
				<Trigger.EnterActions>
					<BeginStoryboard Storyboard="{StaticResource OnDisabled}"/>
				</Trigger.EnterActions>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!--SubmenuHeader Template -->

	<ControlTemplate x:Key="SubmenuHeaderTemplate" TargetType="{x:Type MenuItem}">
		<ControlTemplate.Resources>
			<Storyboard x:Key="HighlightOn">
				<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
					<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
				</DoubleAnimationUsingKeyFrames>
				<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="HeaderHost">
					<EasingColorKeyFrame KeyTime="0:0:0.1" Value="{StaticResource OverFgColor}"/>
				</ColorAnimationUsingKeyFrames>
			</Storyboard>
			<Storyboard x:Key="HighlightOff">
				<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
					<EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
				</DoubleAnimationUsingKeyFrames>
				<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="HeaderHost">
					<EasingColorKeyFrame KeyTime="0:0:0.3" Value="{StaticResource NormalFgColor}"/>
				</ColorAnimationUsingKeyFrames>
			</Storyboard>
			<Storyboard x:Key="OnDisabled">
				<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="Arrow">
					<EasingColorKeyFrame KeyTime="0:0:0.1" Value="{StaticResource DisabledCheckBgColor}"/>
				</ColorAnimationUsingKeyFrames>
				<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="HeaderHost">
					<EasingColorKeyFrame KeyTime="0:0:0.1" Value="{StaticResource DisabledFgColor}"/>
				</ColorAnimationUsingKeyFrames>
			</Storyboard>
			<Storyboard x:Key="OnEnabled">
				<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="Arrow">
					<EasingColorKeyFrame KeyTime="0:0:0.1" Value="{StaticResource CheckBgColor}"/>
				</ColorAnimationUsingKeyFrames>
				<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="HeaderHost">
					<EasingColorKeyFrame KeyTime="0:0:0.1" Value="{StaticResource NormalFgColor}"/>
				</ColorAnimationUsingKeyFrames>
			</Storyboard>
		</ControlTemplate.Resources>
		<Grid>
			<Border x:Name="BaseBorder"
				Background="{TemplateBinding Background}"
				BorderBrush="{TemplateBinding BorderBrush}"
				BorderThickness="{TemplateBinding BorderThickness}"/>
			<Border x:Name="OverBorder">
				<Border.Background>
					<SolidColorBrush Color="{StaticResource PressOverlay}" Opacity="0"/>
				</Border.Background>
			</Border>
			<Border x:Name="Header"
				BorderThickness="{TemplateBinding BorderThickness}"
				Padding="{TemplateBinding Padding}">
				<Grid>
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="Auto" SharedSizeGroup="Icon"/>
						<ColumnDefinition Width="*" SharedSizeGroup="Header"/>
						<ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut"/>
						<ColumnDefinition Width="Auto"/>
					</Grid.ColumnDefinitions>
					<ContentPresenter x:Name="Icon"
						Grid.Column="0"
						Margin="4,0,0,0"
						VerticalAlignment="Center"
						ContentSource="Icon"/>
					<Grid
						Grid.Column="0"
						Margin="4,0,0,0"
						Width="{TemplateBinding MinHeight}"
						Height="{TemplateBinding MinHeight}"/>
					<ContentPresenter x:Name="HeaderHost"
						Grid.Column="1"
						Margin="4,0"
						ContentSource="Header"
						VerticalAlignment="Center">
						<TextElement.Foreground>
							<SolidColorBrush Color="{StaticResource NormalFgColor}"/>
						</TextElement.Foreground>
					</ContentPresenter>
					<Border
						Grid.Column="3"
						Width="{TemplateBinding MinHeight}"
						Height="{TemplateBinding MinHeight}"
						Margin="4,0">
						<Path x:Name="Arrow"
							Margin="3"
							HorizontalAlignment="Center"
							VerticalAlignment="Center"
							Data="M 0 0 L 0 7 L 4 3.5 Z"
							Stretch="Fill">
							<Path.Fill>
								<SolidColorBrush Color="{StaticResource CheckBgColor}"/>
							</Path.Fill>
						</Path>
					</Border>
				</Grid>
			</Border>
			<Popup x:Name="Popup"
				AllowsTransparency="True"
				Focusable="False"
				HorizontalOffset="-2"
				IsOpen="{TemplateBinding IsSubmenuOpen}"
				Placement="Right"
				PopupAnimation="Fade">
				<Border x:Name="SubmenuBorder"
					BorderBrush="{StaticResource TrackBdBrush}"
					BorderThickness="1"
					CornerRadius="0,1,1,0">
					<Border.Background>
						<SolidColorBrush Color="{StaticResource TrackBgColor}" Opacity="0.95"/>
					</Border.Background>
					<ItemsPresenter/>
				</Border>
			</Popup>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="Icon" Value="{x:Null}">
				<Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
			</Trigger>
			<Trigger Property="IsHighlighted" Value="True">
				<Trigger.ExitActions>
					<BeginStoryboard Storyboard="{StaticResource HighlightOff}"/>
				</Trigger.ExitActions>
				<Trigger.EnterActions>
					<BeginStoryboard Storyboard="{StaticResource HighlightOn}"/>
				</Trigger.EnterActions>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Trigger.ExitActions>
					<BeginStoryboard Storyboard="{StaticResource OnEnabled}"/>
				</Trigger.ExitActions>
				<Trigger.EnterActions>
					<BeginStoryboard Storyboard="{StaticResource OnDisabled}"/>
				</Trigger.EnterActions>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!-- SubmenuItem Template -->
	<ControlTemplate x:Key="SubmenuItemTemplate" TargetType="{x:Type MenuItem}">
		<ControlTemplate.Resources>
			<Storyboard x:Key="HighlightOn">
				<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
					<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
				</DoubleAnimationUsingKeyFrames>
				<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="HeaderHost">
					<EasingColorKeyFrame KeyTime="0:0:0.1" Value="{StaticResource OverFgColor}"/>
				</ColorAnimationUsingKeyFrames>
			</Storyboard>
			<Storyboard x:Key="HighlightOff">
				<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
					<EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
				</DoubleAnimationUsingKeyFrames>
				<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="HeaderHost">
					<EasingColorKeyFrame KeyTime="0:0:0.3" Value="{StaticResource NormalFgColor}"/>
				</ColorAnimationUsingKeyFrames>
			</Storyboard>
			<Storyboard x:Key="OnDisabled">
				<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="CheckMark">
					<EasingColorKeyFrame KeyTime="0:0:0.1" Value="{StaticResource DisabledCheckBgColor}"/>
				</ColorAnimationUsingKeyFrames>
				<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="HeaderHost">
					<EasingColorKeyFrame KeyTime="0:0:0.1" Value="{StaticResource DisabledFgColor}"/>
				</ColorAnimationUsingKeyFrames>
			</Storyboard>
			<Storyboard x:Key="OnEnabled">
				<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="CheckMark">
					<EasingColorKeyFrame KeyTime="0:0:0.1" Value="{StaticResource CheckBgColor}"/>
				</ColorAnimationUsingKeyFrames>
				<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="HeaderHost">
					<EasingColorKeyFrame KeyTime="0:0:0.1" Value="{StaticResource NormalFgColor}"/>
				</ColorAnimationUsingKeyFrames>
			</Storyboard>
		</ControlTemplate.Resources>
		<Grid>
			<Border x:Name="BaseBorder"
				Background="{TemplateBinding Background}"
				BorderBrush="{TemplateBinding BorderBrush}"
				BorderThickness="{TemplateBinding BorderThickness}"/>
			<Border x:Name="OverBorder">
				<Border.Background>
					<SolidColorBrush Color="{StaticResource PressOverlay}" Opacity="0"/>
				</Border.Background>
			</Border>
			<Border x:Name="Header"
				BorderThickness="{TemplateBinding BorderThickness}"
				Padding="{TemplateBinding Padding}">
				<Grid>
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="Auto" SharedSizeGroup="Icon"/>
						<ColumnDefinition Width="*" SharedSizeGroup="Header"/>
						<ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut"/>
						<ColumnDefinition Width="Auto"/>
					</Grid.ColumnDefinitions>
					<ContentPresenter x:Name="Icon"
						Grid.Column="0"
						Margin="4,0,0,0"
						VerticalAlignment="Center"
						ContentSource="Icon"/>
					<Border x:Name="Check"
						Grid.Column="0"
						Margin="4,0,0,0"
						Width="{TemplateBinding MinHeight}"
						Height="{TemplateBinding MinHeight}"
						Visibility="Hidden">
						<Path x:Name="CheckMark"
							Margin="2"
							Stretch="Fill"
							Data="M0,6 L3,9 9,0 6,0 3,6 0,3"
							HorizontalAlignment="Center"
							VerticalAlignment="Center"
							UseLayoutRounding="False"
							Visibility="Hidden">
							<Path.Fill>
								<SolidColorBrush Color="{StaticResource CheckBgColor}"/>
							</Path.Fill>
						</Path>
					</Border>
					<ContentPresenter x:Name="HeaderHost"
						Grid.Column="1"
						Margin="4,0"
						ContentSource="Header"
						VerticalAlignment="Center">
						<TextElement.Foreground>
							<SolidColorBrush Color="{StaticResource NormalFgColor}"/>
						</TextElement.Foreground>
					</ContentPresenter>
					<TextBlock x:Name="InputGestureText"
						Grid.Column="2"
						VerticalAlignment="Center"
						Text="{TemplateBinding InputGestureText}"/>
					<Grid
						Grid.Column="3"
						Margin="4,0"
						Width="{TemplateBinding MinHeight}"
						Height="{TemplateBinding MinHeight}"/>
				</Grid>
			</Border>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="Icon" Value="{x:Null}">
				<Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
			</Trigger>
			<Trigger Property="IsChecked" Value="true">
				<Setter TargetName="CheckMark" Property="Visibility" Value="Visible"/>
			</Trigger>
			<Trigger Property="IsCheckable" Value="true">
				<Setter TargetName="Check" Property="Visibility" Value="Visible"/>
				<Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
			</Trigger>
			<Trigger Property="IsHighlighted" Value="True">
				<Trigger.ExitActions>
					<BeginStoryboard Storyboard="{StaticResource HighlightOff}"/>
				</Trigger.ExitActions>
				<Trigger.EnterActions>
					<BeginStoryboard Storyboard="{StaticResource HighlightOn}"/>
				</Trigger.EnterActions>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Trigger.ExitActions>
					<BeginStoryboard Storyboard="{StaticResource OnEnabled}"/>
				</Trigger.ExitActions>
				<Trigger.EnterActions>
					<BeginStoryboard Storyboard="{StaticResource OnDisabled}"/>
				</Trigger.EnterActions>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

    <ItemsPanelTemplate x:Key="MenuItemsPanelTemplate">
        <StackPanel Grid.IsSharedSizeScope="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
    </ItemsPanelTemplate>

	<!-- MenuItem Style -->
	<Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderBrush" Value="{x:Null}"/>
		<Setter Property="BorderThickness" Value="0"/>
        <Setter Property="ItemsPanel" Value="{StaticResource MenuItemsPanelTemplate}"/>
		<Style.Triggers>
			<Trigger Property="Role" Value="TopLevelHeader">
				<Setter Property="Padding" Value="6,4"/>
				<Setter Property="Template" Value="{StaticResource TopLevelHeaderTemplate}"/>
			</Trigger>
			<Trigger Property="Role" Value="TopLevelItem">
				<Setter Property="Padding" Value="6,4"/>
				<Setter Property="Template" Value="{StaticResource TopLevelItemTemplate}"/>
			</Trigger>
			<Trigger Property="Role" Value="SubmenuHeader">
				<Setter Property="Padding" Value="0,4"/>
				<Setter Property="MinHeight" Value="15"/>
				<Setter Property="Template" Value="{StaticResource SubmenuHeaderTemplate}"/>
			</Trigger>
			<Trigger Property="Role" Value="SubmenuItem">
				<Setter Property="Padding" Value="0,4"/>
				<Setter Property="MinHeight" Value="15"/>
				<Setter Property="Template" Value="{StaticResource SubmenuItemTemplate}"/>
			</Trigger>
		</Style.Triggers>
	</Style>


	<!-- ============== CONTEXT MENU ============== -->

	<!-- ContextMenu Style -->
	<Style TargetType="{x:Type ContextMenu}" BasedOn="{StaticResource NoesisControlStyle}">
        <Setter Property="ItemsPanel" Value="{StaticResource MenuItemsPanelTemplate}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ContextMenu}">
					<Grid>
						<Border x:Name="BaseBorder"
							BorderBrush="{StaticResource TrackBdBrush}"
							BorderThickness="1"
							CornerRadius="1">
							<Border.Background>
								<SolidColorBrush Color="{StaticResource TrackBgColor}" Opacity="0.95"/>
							</Border.Background>
						</Border>
						<Border x:Name="DisabledBorder"
							CornerRadius="1.5">
							<Border.Background>
								<SolidColorBrush Color="{StaticResource DisabledOverlay}" Opacity="0"/>
							</Border.Background>
						</Border>
						<Border x:Name="Border"
							BorderThickness="{TemplateBinding BorderThickness}"
							Padding="{TemplateBinding Padding}">
							<ItemsPresenter/>
						</Border>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<!-- ============== TOOL TIP ============== -->

	<!-- ToolTip Style -->
	<Style TargetType="{x:Type ToolTip}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="Foreground" Value="{StaticResource ToolTipFgBrush}"/>
		<Setter Property="Background" Value="{StaticResource ToolTipBgBrush}"/>
		<Setter Property="BorderBrush" Value="{StaticResource ToolTipBdBrush}"/>
		<Setter Property="FontSize" Value="10"/>
		<Setter Property="Padding" Value="6,4"/>
		<Setter Property="Placement" Value="Mouse"/>
		<Setter Property="VerticalOffset" Value="21"/> <!-- Cursor Height -->
		<Setter Property="HorizontalContentAlignment" Value="Left"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToolTip}">
					<Border x:Name="Border"
						Background="{TemplateBinding Background}"
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						Padding="{TemplateBinding Padding}"
						CornerRadius="0">
						<ContentPresenter
							HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<!-- ============== TAB CONTROL ============== -->

	<!-- TabControl Style -->
	<Style TargetType="{x:Type TabControl}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="Background" Value="{StaticResource NormalDarkBgBrush}"/>
		<Setter Property="BorderBrush" Value="{StaticResource TrackBdBrush}"/>
		<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
		<Setter Property="VerticalContentAlignment" Value="Stretch"/>
		<Setter Property="Padding" Value="4"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TabControl}">
					<Grid KeyboardNavigation.TabNavigation="Local">
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto"/>
							<RowDefinition Height="*"/>
						</Grid.RowDefinitions>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0:0:0.1" To="Disabled"/>
									<VisualTransition From="Disabled" GeneratedDuration="0:0:0.1"/>
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Normal"/>
								<VisualState x:Name="Disabled">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="DisabledBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="PART_SelectedContentHost">
											<EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledFgColor}"/>
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<TabPanel x:Name="HeaderPanel"
							Grid.Row="0"
							Margin="0,0,6,-1"
							Panel.ZIndex="1"
							Background="Transparent"
							IsItemsHost="True"
							KeyboardNavigation.TabIndex="1"/>
						<Border x:Name="BaseBorder"
							Grid.Row="1"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							CornerRadius="0,1,1,1"/>
						<Border x:Name="DisabledBorder"
							Grid.Row="1"
							CornerRadius="0,1.5,1.5,1.5">
							<Border.Background>
								<SolidColorBrush Color="{StaticResource DisabledOverlay}" Opacity="0"/>
							</Border.Background>
						</Border>
						<Border x:Name="SelectedContentBorder"
							Grid.Row="1"
							BorderThickness="{TemplateBinding BorderThickness}"
							Padding="{TemplateBinding Padding}"
							KeyboardNavigation.DirectionalNavigation="Contained"
							KeyboardNavigation.TabIndex="2"
							KeyboardNavigation.TabNavigation="Local">
							<ContentPresenter x:Name="PART_SelectedContentHost"
								ContentSource="SelectedContent"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
								<TextElement.Foreground>
									<SolidColorBrush Color="{StaticResource NormalFgColor}"/>
								</TextElement.Foreground>
							</ContentPresenter>
						</Border>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- TabItem Style -->
	<Style TargetType="{x:Type TabItem}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="Padding" Value="6,4,6,2"/>
		<Setter Property="BorderThickness" Value="1,1,1,0"/>
		<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
		<Setter Property="VerticalContentAlignment" Value="Stretch"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TabItem}">
					<Grid x:Name="Tab" Margin="0,2,-1,1">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
									<VisualTransition From="MouseOver" GeneratedDuration="0:0:0.3"/>
									<VisualTransition GeneratedDuration="0:0:0.1" To="Disabled"/>
									<VisualTransition From="Disabled" GeneratedDuration="0:0:0.1"/>
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Normal"/>
								<VisualState x:Name="MouseOver">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="ContentHost">
											<EasingColorKeyFrame KeyTime="0" Value="{StaticResource OverFgColor}"/>
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Disabled">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="DisabledBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="ContentHost">
											<EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledFgColor}"/>
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="FocusStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0:0:0.1" To="Focused"/>
									<VisualTransition From="Focused" GeneratedDuration="0:0:0.3"/>
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Unfocused"/>
								<VisualState x:Name="Focused">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="FocusBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="FocusInnerBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="FocusInnerBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Border x:Name="BaseBorder"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							CornerRadius="1,1,0,0"/>
						<Border x:Name="OverBorder"
							BorderThickness="{TemplateBinding BorderThickness}"
							CornerRadius="1,1,0,0">
							<Border.Background>
								<SolidColorBrush Color="{StaticResource OverOverlay}" Opacity="0"/>
							</Border.Background>
						</Border>
						<Border x:Name="FocusBorder"
							BorderThickness="{TemplateBinding BorderThickness}"
							CornerRadius="1,1,0,0">
							<Border.BorderBrush>
								<SolidColorBrush Color="{StaticResource FocusColor}" Opacity="0"/>
							</Border.BorderBrush>
							<Border x:Name="FocusInnerBorder"
								BorderThickness="1,1,1,0"
								CornerRadius="0.01,0.01,0,0">
								<Border.Background>
									<LinearGradientBrush EndPoint="0.5,1" MappingMode="RelativeToBoundingBox" StartPoint="0.5,0.5" Opacity="0">
										<GradientStop Color="{StaticResource FocusGlowColor}" Offset="0"/>
										<GradientStop Color="{StaticResource FocusTransparentGlowColor}" Offset="1"/>
									</LinearGradientBrush>
								</Border.Background>
								<Border.BorderBrush>
									<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0" Opacity="0">
										<GradientStop Color="{StaticResource FocusShineColor}" Offset="0"/>
										<GradientStop Color="{StaticResource FocusTransparentShineColor}" Offset="1"/>
									</LinearGradientBrush>
								</Border.BorderBrush>
							</Border>
						</Border>
						<Border x:Name="DisabledBorder"
							CornerRadius="1.5,1.5,0,0">
							<Border.Background>
								<SolidColorBrush Color="{StaticResource DisabledOverlay}" Opacity="0"/>
							</Border.Background>
						</Border>
						<Border x:Name="TabBorder"
							BorderThickness="{TemplateBinding BorderThickness}"
							Padding="{TemplateBinding Padding}"
							CornerRadius="1,1,0,0">
							<ContentPresenter x:Name="ContentHost"
								ContentSource="Header"
								HorizontalAlignment="Left"
								VerticalAlignment="Center"/>
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsSelected" Value="True">
							<Setter TargetName="Tab" Property="Margin" Value="0,0,-1,0"/>
							<Setter TargetName="OverBorder" Property="Visibility" Value="Hidden"/>
							<Setter Property="Panel.ZIndex" Value="1"/>
							<Setter Property="Padding" Value="6,4"/>
							<Setter Property="Background" Value="{StaticResource NormalDarkBgBrush}"/>
							<Setter Property="BorderBrush" Value="{StaticResource TrackLightBdBrush}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<!-- ============== TEXT BOX ============== -->

	<!-- TextBox Template -->
	<ControlTemplate x:Key="TextBoxTemplate" TargetType="{x:Type TextBox}">
		<Grid>
			<VisualStateManager.VisualStateGroups>
				<VisualStateGroup x:Name="CommonStates">
					<VisualStateGroup.Transitions>
						<VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
						<VisualTransition From="MouseOver" GeneratedDuration="0:0:0.3"/>
						<VisualTransition GeneratedDuration="0:0:0.1" To="Disabled"/>
						<VisualTransition From="Disabled" GeneratedDuration="0:0:0.1"/>
					</VisualStateGroup.Transitions>
					<VisualState x:Name="Normal"/>
					<VisualState x:Name="Disabled">
						<Storyboard>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="DisabledBorder">
								<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
					<VisualState x:Name="ReadOnly"/>
					<VisualState x:Name="MouseOver">
						<Storyboard>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
								<EasingDoubleKeyFrame KeyTime="0" Value="0.5"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
				</VisualStateGroup>
				<VisualStateGroup x:Name="FocusStates">
					<VisualStateGroup.Transitions>
						<VisualTransition GeneratedDuration="0:0:0.1" To="Focused"/>
						<VisualTransition From="Focused" GeneratedDuration="0:0:0.3"/>
					</VisualStateGroup.Transitions>
					<VisualState x:Name="Unfocused"/>
					<VisualState x:Name="Focused">
						<Storyboard>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="FocusBorder">
								<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="FocusInnerBorder">
								<EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="FocusInnerBorder">
								<EasingDoubleKeyFrame KeyTime="0" Value="0.15"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
				</VisualStateGroup>
			</VisualStateManager.VisualStateGroups>
			<Border x:Name="BaseBorder"
				Background="{TemplateBinding Background}"
				BorderBrush="{TemplateBinding BorderBrush}"
				BorderThickness="{TemplateBinding BorderThickness}"
				CornerRadius="1">
			</Border>
			<Border x:Name="OverBorder"
				BorderThickness="{TemplateBinding BorderThickness}"
				CornerRadius="1">
				<Border.Background>
					<SolidColorBrush Color="{StaticResource OverOverlay}" Opacity="0"/>
				</Border.Background>
			</Border>
			<Border x:Name="FocusBorder"
				BorderThickness="{TemplateBinding BorderThickness}"
				CornerRadius="1">
				<Border.BorderBrush>
					<SolidColorBrush Color="{StaticResource FocusColor}" Opacity="0"/>
				</Border.BorderBrush>
				<Border x:Name="FocusInnerBorder"
					BorderThickness="1"
					CornerRadius="0.01">
					<Border.Background>
						<SolidColorBrush Color="{StaticResource FocusGlowColor}" Opacity="0"/>
					</Border.Background>
					<Border.BorderBrush>
						<SolidColorBrush Color="{StaticResource FocusShineColor}" Opacity="0"/>
					</Border.BorderBrush>
				</Border>
			</Border>
			<Border x:Name="DisabledBorder"
				CornerRadius="1.5">
				<Border.Background>
					<SolidColorBrush Color="{StaticResource DisabledOverlay}" Opacity="0"/>
				</Border.Background>
			</Border>
			<Border BorderThickness="{TemplateBinding BorderThickness}">
				<ScrollViewer x:Name="PART_ContentHost"
					Focusable="False"
					Padding="{TemplateBinding Padding}"
					Foreground="{TemplateBinding Foreground}"/>
			</Border>
		</Grid>
	</ControlTemplate>

	<!-- TextBox Style -->
	<Style TargetType="{x:Type TextBox}">
		<Style.Resources>
			<Storyboard x:Key="MouseOverOn">
				<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="{x:Null}">
					<EasingColorKeyFrame KeyTime="0:0:0.1" Value="{StaticResource OverFgColor}"/>
				</ColorAnimationUsingKeyFrames>
			</Storyboard>
			<Storyboard x:Key="MouseOverOff">
				<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="{x:Null}">
					<EasingColorKeyFrame KeyTime="0:0:0.3" Value="{StaticResource NormalFgColor}"/>
				</ColorAnimationUsingKeyFrames>
			</Storyboard>
			<Storyboard x:Key="OnDisabled">
				<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="{x:Null}">
					<EasingColorKeyFrame KeyTime="0:0:0.1" Value="{StaticResource DisabledFgColor}"/>
				</ColorAnimationUsingKeyFrames>
			</Storyboard>
			<Storyboard x:Key="OnEnabled">
				<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="{x:Null}">
					<EasingColorKeyFrame KeyTime="0:0:0.1" Value="{StaticResource NormalFgColor}"/>
				</ColorAnimationUsingKeyFrames>
			</Storyboard>
		</Style.Resources>
		<Setter Property="Foreground">
			<Setter.Value>
				<SolidColorBrush Color="{StaticResource NormalFgColor}"/>
			</Setter.Value>
		</Setter>
		<Setter Property="Background" Value="{StaticResource TrackBgBrush}"/>
		<Setter Property="BorderBrush" Value="{StaticResource TrackBdBrush}"/>
		<Setter Property="CaretBrush" Value="{StaticResource CaretBrush}"/>
		<Setter Property="SelectionBrush" Value="{StaticResource SelectionBrush}"/>
		<Setter Property="SelectionOpacity" Value="0.5"/>
		<Setter Property="Padding" Value="2,4"/>
		<Setter Property="TextAlignment" Value="Left"/>
		<Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
		<Setter Property="AllowDrop" Value="True"/>
		<Setter Property="Template" Value="{StaticResource TextBoxTemplate}"/>
		<Style.BasedOn>
			<StaticResource ResourceKey="NoesisControlStyle"/>
		</Style.BasedOn>
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Trigger.ExitActions>
					<BeginStoryboard Storyboard="{StaticResource MouseOverOff}"/>
				</Trigger.ExitActions>
				<Trigger.EnterActions>
					<BeginStoryboard Storyboard="{StaticResource MouseOverOn}"/>
				</Trigger.EnterActions>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Trigger.ExitActions>
					<BeginStoryboard Storyboard="{StaticResource OnEnabled}"/>
				</Trigger.ExitActions>
				<Trigger.EnterActions>
					<BeginStoryboard Storyboard="{StaticResource OnDisabled}"/>
				</Trigger.EnterActions>
			</Trigger>
			<Trigger Property="IsEnabled" Value="True">
				<Setter Property="Cursor" Value="IBeam" />
			</Trigger>
		</Style.Triggers>
	</Style>


	<!-- ============== PASSWORD BOX ============== -->

	<!-- SimpleScrollViewer Template -->
	<ControlTemplate x:Key="SimpleScrollViewer" TargetType="{x:Type ScrollViewer}">
		<ScrollContentPresenter Margin="{TemplateBinding Padding}"/>
	</ControlTemplate>

	<!-- TextBox NoWrap Template -->
	<ControlTemplate x:Key="PasswordTemplate" TargetType="{x:Type PasswordBox}">
		<Grid>
			<VisualStateManager.VisualStateGroups>
				<VisualStateGroup x:Name="CommonStates">
					<VisualStateGroup.Transitions>
						<VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
						<VisualTransition From="MouseOver" GeneratedDuration="0:0:0.3"/>
						<VisualTransition GeneratedDuration="0:0:0.1" To="Disabled"/>
						<VisualTransition From="Disabled" GeneratedDuration="0:0:0.1"/>
					</VisualStateGroup.Transitions>
					<VisualState x:Name="Normal"/>
					<VisualState x:Name="Disabled">
						<Storyboard>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="DisabledBorder">
								<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
					<VisualState x:Name="ReadOnly"/>
					<VisualState x:Name="MouseOver">
						<Storyboard>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
								<EasingDoubleKeyFrame KeyTime="0" Value="0.5"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
				</VisualStateGroup>
				<VisualStateGroup x:Name="FocusStates">
					<VisualStateGroup.Transitions>
						<VisualTransition GeneratedDuration="0:0:0.1" To="Focused"/>
						<VisualTransition From="Focused" GeneratedDuration="0:0:0.3"/>
					</VisualStateGroup.Transitions>
					<VisualState x:Name="Unfocused"/>
					<VisualState x:Name="Focused">
						<Storyboard>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="FocusBorder">
								<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="FocusInnerBorder">
								<EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
							</DoubleAnimationUsingKeyFrames>
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="FocusInnerBorder">
								<EasingDoubleKeyFrame KeyTime="0" Value="0.15"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</VisualState>
				</VisualStateGroup>
			</VisualStateManager.VisualStateGroups>
			<Border x:Name="BaseBorder"
				Background="{TemplateBinding Background}"
				BorderBrush="{TemplateBinding BorderBrush}"
				BorderThickness="{TemplateBinding BorderThickness}"
				CornerRadius="1"/>
			<Border x:Name="OverBorder"
				BorderThickness="{TemplateBinding BorderThickness}"
				CornerRadius="1">
				<Border.Background>
					<SolidColorBrush Color="{StaticResource OverOverlay}" Opacity="0"/>
				</Border.Background>
			</Border>
			<Border x:Name="FocusBorder"
				BorderThickness="{TemplateBinding BorderThickness}"
				CornerRadius="1">
				<Border.BorderBrush>
					<SolidColorBrush Color="{StaticResource FocusColor}" Opacity="0"/>
				</Border.BorderBrush>
				<Border x:Name="FocusInnerBorder"
					BorderThickness="1"
					CornerRadius="0.01">
					<Border.Background>
						<SolidColorBrush Color="{StaticResource FocusGlowColor}" Opacity="0"/>
					</Border.Background>
					<Border.BorderBrush>
						<SolidColorBrush Color="{StaticResource FocusShineColor}" Opacity="0"/>
					</Border.BorderBrush>
				</Border>
			</Border>
			<Border x:Name="DisabledBorder"
				CornerRadius="1.5">
				<Border.Background>
					<SolidColorBrush Color="{StaticResource DisabledOverlay}" Opacity="0"/>
				</Border.Background>
			</Border>
			<Border BorderThickness="{TemplateBinding BorderThickness}">
				<ScrollViewer x:Name="PART_ContentHost"
					Focusable="False"
					Template="{StaticResource SimpleScrollViewer}"
					Padding="{TemplateBinding Padding}"
					Foreground="{TemplateBinding Foreground}"/>
			</Border>
		</Grid>
	</ControlTemplate>

	<!-- TextBox Style -->
	<Style TargetType="{x:Type PasswordBox}">
		<Style.Resources>
			<Storyboard x:Key="MouseOverOn">
				<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="{x:Null}">
					<EasingColorKeyFrame KeyTime="0:0:0.1" Value="{StaticResource OverFgColor}"/>
				</ColorAnimationUsingKeyFrames>
			</Storyboard>
			<Storyboard x:Key="MouseOverOff">
				<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="{x:Null}">
					<EasingColorKeyFrame KeyTime="0:0:0.3" Value="{StaticResource NormalFgColor}"/>
				</ColorAnimationUsingKeyFrames>
			</Storyboard>
			<Storyboard x:Key="OnDisabled">
				<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="{x:Null}">
					<EasingColorKeyFrame KeyTime="0:0:0.5" Value="{StaticResource DisabledFgColor}"/>
				</ColorAnimationUsingKeyFrames>
			</Storyboard>
			<Storyboard x:Key="OnEnabled">
				<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="{x:Null}">
					<EasingColorKeyFrame KeyTime="0:0:0.5" Value="{StaticResource NormalFgColor}"/>
				</ColorAnimationUsingKeyFrames>
			</Storyboard>
		</Style.Resources>
		<Setter Property="Foreground">
			<Setter.Value>
				<SolidColorBrush Color="{StaticResource NormalFgColor}"/>
			</Setter.Value>
		</Setter>
		<Setter Property="Background" Value="{StaticResource TrackBgBrush}"/>
		<Setter Property="BorderBrush" Value="{StaticResource TrackBdBrush}"/>
		<Setter Property="CaretBrush" Value="{StaticResource CaretBrush}"/>
		<Setter Property="SelectionBrush" Value="{StaticResource SelectionBrush}"/>
		<Setter Property="SelectionOpacity" Value="0.5"/>
		<Setter Property="Padding" Value="2,4"/>
		<Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
		<Setter Property="AllowDrop" Value="true"/>
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden"/>
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Hidden"/>
		<Setter Property="Template" Value="{StaticResource PasswordTemplate}"/>
		<Style.BasedOn>
			<StaticResource ResourceKey="NoesisControlStyle"/>
		</Style.BasedOn>
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Trigger.ExitActions>
					<BeginStoryboard Storyboard="{StaticResource MouseOverOff}"/>
				</Trigger.ExitActions>
				<Trigger.EnterActions>
					<BeginStoryboard Storyboard="{StaticResource MouseOverOn}"/>
				</Trigger.EnterActions>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Trigger.ExitActions>
					<BeginStoryboard Storyboard="{StaticResource OnEnabled}"/>
				</Trigger.ExitActions>
				<Trigger.EnterActions>
					<BeginStoryboard Storyboard="{StaticResource OnDisabled}"/>
				</Trigger.EnterActions>
			</Trigger>
			<Trigger Property="IsEnabled" Value="True">
				<Setter Property="Cursor" Value="IBeam" />
			</Trigger>
		</Style.Triggers>
	</Style>


	<!-- ============== COMBO BOX ============== -->

	<!-- ComboBoxToggleButton Template -->
	<Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="ClickMode" Value="Press"/>
		<Setter Property="Focusable" Value="False"/>
		<Setter Property="IsTabStop" Value="False"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border Background="Transparent"/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- ComboBoxTextBox Template -->
	<Style x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="CaretBrush" Value="{StaticResource CaretBrush}"/>
		<Setter Property="SelectionBrush" Value="{StaticResource SelectionBrush}"/>
		<Setter Property="SelectionOpacity" Value="0.5"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TextBox}">
					<Border x:Name="Border"
						Background="Transparent"
						Focusable="False">
						<ScrollViewer x:Name="PART_ContentHost"
							Focusable="False"
							Template="{StaticResource SimpleScrollViewer}"
							Foreground="{TemplateBinding Foreground}"/>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- ComboBox Style -->
	<Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="MinHeight" Value="15"/>
		<Setter Property="Padding" Value="2,4"/>
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
		<Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
		<Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel KeyboardNavigation.DirectionalNavigation="Contained"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBox}">
					<Grid>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="FocusStates">
								<VisualStateGroup.Transitions>
									<VisualTransition From="Focused" GeneratedDuration="0:0:0.2" To="FocusedDropDown"/>
									<VisualTransition From="Unfocused" GeneratedDuration="0:0:0.1" To="Focused"/>
									<VisualTransition From="FocusedDropDown" GeneratedDuration="0:0:0.2"/>
									<VisualTransition From="Unfocused" GeneratedDuration="0:0:0.2" To="FocusedDropDown"/>
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Unfocused"/>
								<VisualState x:Name="Focused">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="FocusLeftBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="FocusLeftInnerBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="FocusLeftInnerBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="FocusRightBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="FocusRightInnerBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="FocusRightInnerBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="FocusSeparatorBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="FocusSeparatorInnerBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="FocusSeparatorInnerBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="FocusedDropDown">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="FocusLeftBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="FocusLeftInnerBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="FocusLeftInnerBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="FocusRightBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="FocusRightInnerBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="FocusRightInnerBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="FocusSeparatorBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="FocusSeparatorInnerBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="FocusSeparatorInnerBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="Arrow">
											<EasingDoubleKeyFrame KeyTime="0" Value="-180"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="CommonStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
									<VisualTransition From="MouseOver" GeneratedDuration="0:0:0.3"/>
									<VisualTransition GeneratedDuration="0:0:0.1" To="Disabled"/>
									<VisualTransition From="Disabled" GeneratedDuration="0:0:0.1"/>
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Normal"/>
								<VisualState x:Name="MouseOver">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="EditOverBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="0.5"/>
										</DoubleAnimationUsingKeyFrames>
										<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="ContentHost">
											<EasingColorKeyFrame KeyTime="0" Value="{StaticResource OverFgColor}"/>
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Disabled">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="DisableBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="Arrow">
											<EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledCheckBgColor}"/>
										</ColorAnimationUsingKeyFrames>
										<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Stroke).(SolidColorBrush.Color)" Storyboard.TargetName="Arrow">
											<EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledCheckBdColor}"/>
										</ColorAnimationUsingKeyFrames>
										<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="ContentHost">
											<EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledFgColor}"/>
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="EditStates">
								<VisualState x:Name="Editable">
									<Storyboard>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="EditBorder">
											<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
										</ObjectAnimationUsingKeyFrames>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="FocusSeparatorBorder">
											<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
										</ObjectAnimationUsingKeyFrames>
										<ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Margin)" Storyboard.TargetName="FocusLeftBorder">
											<EasingThicknessKeyFrame KeyTime="0" Value="0,0,2,0"/>
										</ThicknessAnimationUsingKeyFrames>
										<ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Margin)" Storyboard.TargetName="FocusRightBorder">
											<EasingThicknessKeyFrame KeyTime="0" Value="1,0,0,0"/>
										</ThicknessAnimationUsingKeyFrames>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="ContentBorder">
											<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}"/>
										</ObjectAnimationUsingKeyFrames>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="EditableBorder">
											<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
										</ObjectAnimationUsingKeyFrames>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="EditOverBorder">
											<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Uneditable"/>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="*"/>
								<ColumnDefinition Width="Auto"/>
							</Grid.ColumnDefinitions>
							<Border x:Name="BaseBorder"
								Grid.Column="0"
								Grid.ColumnSpan="2"
								Background="{TemplateBinding Background}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								CornerRadius="1"/>
							<Border x:Name="OverBorder"
								Grid.Column="0"
								BorderThickness="{TemplateBinding BorderThickness}"
								CornerRadius="1" Grid.ColumnSpan="2">
								<Border.Background>
									<SolidColorBrush Color="{StaticResource OverOverlay}" Opacity="0"/>
								</Border.Background>
							</Border>
							<Border x:Name="EditBorder"
								Grid.Column="0"
								Background="{StaticResource TrackBgBrush}"
								BorderBrush="{StaticResource TrackBdBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								Visibility="Collapsed"/>
							<Border x:Name="EditOverBorder"
								Grid.Column="0"
								BorderThickness="{TemplateBinding BorderThickness}"
								CornerRadius="1,0,0,1" Visibility="Collapsed">
								<Border.Background>
									<SolidColorBrush Color="{StaticResource OverOverlay}" Opacity="0"/>
								</Border.Background>
							</Border>
							<Border x:Name="FocusLeftBorder"
								BorderThickness="1,1,0,1"
								CornerRadius="1,0,0,1"
								IsHitTestVisible="False">
								<Border.BorderBrush>
									<SolidColorBrush Color="{StaticResource FocusColor}" Opacity="0"/>
								</Border.BorderBrush>
								<Border x:Name="FocusLeftInnerBorder"
									BorderThickness="1,1,0,1"
									CornerRadius="0.01"
									IsHitTestVisible="False">
									<Border.Background>
										<SolidColorBrush Color="{StaticResource FocusGlowColor}" Opacity="0"/>
									</Border.Background>
									<Border.BorderBrush>
										<SolidColorBrush Color="{StaticResource FocusShineColor}" Opacity="0"/>
									</Border.BorderBrush>
								</Border>
							</Border>
							<Border x:Name="FocusRightBorder"
								Grid.Column="1"
								BorderThickness="0,1,1,1"
								CornerRadius="0,1,1,0"
								IsHitTestVisible="False">
								<Border.BorderBrush>
									<SolidColorBrush Color="{StaticResource FocusColor}" Opacity="0"/>
								</Border.BorderBrush>
								<Border x:Name="FocusRightInnerBorder"
									BorderThickness="0,1,1,1"
									CornerRadius="0.01"
									IsHitTestVisible="False">
									<Border.Background>
										<SolidColorBrush Color="{StaticResource FocusGlowColor}" Opacity="0"/>
									</Border.Background>
									<Border.BorderBrush>
										<SolidColorBrush Color="{StaticResource FocusShineColor}" Opacity="0"/>
									</Border.BorderBrush>
								</Border>
							</Border>
							<Border x:Name="FocusSeparatorBorder"
								BorderThickness="0,1"
								Margin="0,0,-1,0"
								HorizontalAlignment="Right"
								Visibility="Collapsed">
								<Border.BorderBrush>
									<SolidColorBrush Color="{StaticResource FocusColor}" Opacity="0"/>
								</Border.BorderBrush>
								<Border x:Name="FocusSeparatorInnerBorder"
									BorderThickness="1,0" Width="3">
									<Border.BorderBrush>
										<SolidColorBrush Color="{StaticResource FocusShineColor}" Opacity="0"/>
									</Border.BorderBrush>
									<Border.Background>
										<SolidColorBrush Color="{StaticResource FocusColor}" Opacity="0"/>
									</Border.Background>
								</Border>
							</Border>
							<Border x:Name="DisableBorder"
								Grid.Column="0" Grid.ColumnSpan="2" CornerRadius="1.5">
								<Border.Background>
									<SolidColorBrush Color="{StaticResource DisabledOverlay}" Opacity="0"/>
								</Border.Background>
							</Border>
							<ToggleButton x:Name="DropDownButton"
								Grid.ColumnSpan="2"
								Style="{StaticResource ComboBoxToggleButton}"
								MinWidth="{TemplateBinding MinHeight}"
								IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
							<Border x:Name="ContentBorder"
								Grid.Column="0"
								Margin="{TemplateBinding BorderThickness}"
								Padding="{TemplateBinding Padding}"
								Visibility="Visible">
								<ContentPresenter x:Name="ContentHost"
									HorizontalAlignment="Left"
									VerticalAlignment="Center"
									ContentSource="SelectionBoxItem"
									IsHitTestVisible="False"
									Margin="2,0,0,0">
									<TextElement.Foreground>
										<SolidColorBrush Color="{StaticResource NormalFgColor}"/>
									</TextElement.Foreground>
								</ContentPresenter>
							</Border>
							<Border x:Name="EditableBorder"
								Grid.Column="0"
								Margin="{TemplateBinding BorderThickness}"
								Padding="{TemplateBinding Padding}"
								Visibility="Hidden">
								<TextBox x:Name="PART_EditableTextBox"
									VerticalAlignment="Center"
									Focusable="True"
									IsReadOnly="{TemplateBinding IsReadOnly}"
									Style="{StaticResource ComboBoxTextBox}"
									Margin="2,0,0,0"
									Foreground="{TemplateBinding Foreground}"/>
							</Border>
							<Border x:Name="ArrowBorder"
								Grid.Column="1"
								BorderThickness="{TemplateBinding BorderThickness}"
								Margin="0,1,0,0"
								IsHitTestVisible="False">
								<Border
									Width="{TemplateBinding MinHeight}"
									Height="{TemplateBinding MinHeight}">
									<Path x:Name="Arrow"
										Margin="3"
										Stretch="Fill"
										Data="M0,0 L8,0 4,4 Z" StrokeThickness="0.25" RenderTransformOrigin="0.5,0.4">
										<Path.RenderTransform>
											<TransformGroup>
												<ScaleTransform/>
												<SkewTransform/>
												<RotateTransform/>
												<TranslateTransform/>
											</TransformGroup>
										</Path.RenderTransform>
										<Path.Stroke>
											<SolidColorBrush Color="{StaticResource CheckBdColor}"/>
										</Path.Stroke>
										<Path.Fill>
											<SolidColorBrush Color="{StaticResource CheckBgColor}"/>
										</Path.Fill>
									</Path>
								</Border>
							</Border>
						</Grid>
						<Popup x:Name="PART_Popup"
							IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
							Focusable="False"
							Placement="Bottom"
							PopupAnimation="Slide"
							VerticalOffset="1"
							AllowsTransparency="True">
							<Border x:Name="DropDownBorder"
								BorderBrush="{StaticResource TrackBdBrush}"
								MaxHeight="{TemplateBinding MaxDropDownHeight}"
								MinWidth="{TemplateBinding ActualWidth}"
								BorderThickness="1"
								CornerRadius="1">
								<Border.Background>
									<SolidColorBrush Color="{StaticResource TrackBgColor}" Opacity="0.95"/>
								</Border.Background>
								<ScrollViewer>
									<ItemsPresenter/>
								</ScrollViewer>
							</Border>
						</Popup>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="HasItems" Value="False">
							<Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- ComboBoxItem Style -->
	<Style TargetType="{x:Type ComboBoxItem}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderBrush" Value="Transparent"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="Padding" Value="4"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBoxItem}">
					<ControlTemplate.Resources>
						<Storyboard x:Key="HighlightOn">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
								<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="ContentHost">
								<EasingColorKeyFrame KeyTime="0" Value="{StaticResource OverFgColor}"/>
							</ColorAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="HighLightOff">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
								<EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="ContentHost">
								<EasingColorKeyFrame KeyTime="0" Value="{StaticResource NormalFgColor}"/>
							</ColorAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<Grid>
						<Border x:Name="BaseBorder"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							Padding="{TemplateBinding Padding}"/>
						<Border x:Name="OverBorder">
							<Border.Background>
								<SolidColorBrush Color="{StaticResource PressOverlay}" Opacity="0"/>
							</Border.Background>
						</Border>
						<Border x:Name="Border"
							BorderThickness="{TemplateBinding BorderThickness}"
							Padding="{TemplateBinding Padding}">
							<ContentPresenter x:Name="ContentHost"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
								<TextElement.Foreground>
									<SolidColorBrush Color="{StaticResource NormalFgColor}"/>
								</TextElement.Foreground>
							</ContentPresenter>
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsHighlighted" Value="True">
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource HighLightOff}"/>
							</Trigger.ExitActions>
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource HighlightOn}"/>
							</Trigger.EnterActions>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<!-- ============== TREE VIEW ============== -->

	<!-- TreeView Style -->
	<Style TargetType="{x:Type TreeView}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="Background" Value="{StaticResource TrackBgBrush}"/>
		<Setter Property="BorderBrush" Value="{StaticResource TrackBdBrush}"/>
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
		<Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
		<Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TreeView}">
					<ControlTemplate.Resources>
						<Storyboard x:Key="OnDisabled">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="DisabledBorder">
								<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="OnEnabled">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="DisabledBorder">
								<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<Grid>
						<Border x:Name="BaseBorder"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							CornerRadius="1"/>
						<Border x:Name="DisabledBorder"
							CornerRadius="1.5">
							<Border.Background>
								<SolidColorBrush Color="{StaticResource DisabledOverlay}" Opacity="0"/>
							</Border.Background>
						</Border>
						<Border
							BorderThickness="{TemplateBinding BorderThickness}">
							<ScrollViewer Focusable="False">
								<ItemsPresenter/>
							</ScrollViewer>
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource OnEnabled}"/>
							</Trigger.ExitActions>
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource OnDisabled}"/>
							</Trigger.EnterActions>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- ExpandCollapseToggle Style -->
	<Style x:Key="TreeViewToggleButton" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="Focusable" Value="False"/>
		<Setter Property="ClickMode" Value="Press"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Grid Background="Transparent"/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--	TreeViewItem Style -->
	<Style TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderBrush" Value="Transparent"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="Padding" Value="2,4"/>
		<Setter Property="MinHeight" Value="15"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TreeViewItem}">
					<ControlTemplate.Resources>
						<Storyboard x:Key="HeaderMouseOverOn">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
								<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="PART_Header">
								<EasingColorKeyFrame KeyTime="0" Value="{StaticResource OverFgColor}"/>
							</ColorAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="HeaderMouseOverOff">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
								<EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="PART_Header">
								<EasingColorKeyFrame KeyTime="0" Value="{StaticResource NormalFgColor}"/>
							</ColorAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="ExpanderMouseOverOn">
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="Arrow">
								<EasingColorKeyFrame KeyTime="0:0:0.1" Value="{StaticResource CheckBdColor}"/>
							</ColorAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="ExpanderMouseOverOff">
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="Arrow">
								<EasingColorKeyFrame KeyTime="0:0:0.3" Value="{StaticResource CheckBgColor}"/>
							</ColorAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<Grid Margin="0,0,0,1">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto"/>
							<ColumnDefinition Width="Auto"/>
							<ColumnDefinition Width="*"/>
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto"/>
							<RowDefinition/>
						</Grid.RowDefinitions>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="SelectionStates">
								<VisualState x:Name="Selected">
									<Storyboard>
										<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="OverBorder">
											<EasingColorKeyFrame KeyTime="0" Value="{StaticResource PressOverlay}"/>
										</ColorAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Unselected"/>
								<VisualState x:Name="SelectedInactive">
									<Storyboard>
										<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="OverBorder">
											<EasingColorKeyFrame KeyTime="0" Value="{StaticResource PressOverlay}"/>
										</ColorAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="ExpansionStates">
								<VisualStateGroup.Transitions>
									<VisualTransition From="Collapsed" GeneratedDuration="0" To="Expanded">
										<Storyboard>
											<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="ItemsHost">
												<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
											</ObjectAnimationUsingKeyFrames>
											<DoubleAnimation Duration="0:0:0.2" To="1" Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(ScaleTransform.ScaleY)" Storyboard.TargetName="ItemsHost"/>
											<DoubleAnimation Duration="0:0:0.2" To="90" Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)" Storyboard.TargetName="Arrow"/>
											<DoubleAnimation BeginTime="0:0:0.2" Duration="0:0:0.2" To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="ItemsHost"/>
										</Storyboard>
									</VisualTransition>
									<VisualTransition From="Expanded" GeneratedDuration="0" To="Collapsed">
										<Storyboard>
											<ObjectAnimationUsingKeyFrames BeginTime="0:0:0.4" Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="ItemsHost">
												<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}"/>
											</ObjectAnimationUsingKeyFrames>
											<DoubleAnimation BeginTime="0:0:0.2" Duration="0:0:0.2" To="0.01" Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(ScaleTransform.ScaleY)" Storyboard.TargetName="ItemsHost"/>
											<DoubleAnimation BeginTime="0:0:0.2" Duration="0:0:0.2" To="0" Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)" Storyboard.TargetName="Arrow"/>
											<DoubleAnimation Duration="0:0:0.2" To="0" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="ItemsHost"/>
										</Storyboard>
									</VisualTransition>
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Expanded">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.LayoutTransform).(ScaleTransform.ScaleY)" Storyboard.TargetName="ItemsHost">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)" Storyboard.TargetName="Arrow">
											<EasingDoubleKeyFrame KeyTime="0" Value="90"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="ItemsHost">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="ItemsHost">
											<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Collapsed"/>
							</VisualStateGroup>
							<VisualStateGroup x:Name="CommonStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0:0:0.1" To="Disabled"/>
									<VisualTransition From="Disabled" GeneratedDuration="0:0:0.1"/>
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Normal"/>
								<VisualState x:Name="MouseOver"/>
								<VisualState x:Name="Disabled">
									<Storyboard>
										<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="Arrow">
											<EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledCheckBgColor}"/>
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="FocusStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0:0:0.1" To="Focused"/>
									<VisualTransition From="Focused" GeneratedDuration="0:0:0.3"/>
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Focused">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="FocusBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="FocusBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Unfocused"/>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Border x:Name="ArrowBorder"
							Grid.Column="0"
							Width="{TemplateBinding MinHeight}"
							Height="{TemplateBinding MinHeight}"
							Margin="2,0,1,0"
							Padding="3"
							CornerRadius="1">
							<Path x:Name="Arrow"
								Data="M4,0 L8,4 4,8 Z"
								Stretch="Fill" RenderTransformOrigin="0.4,0.5">
								<Path.RenderTransform>
									<RotateTransform/>
								</Path.RenderTransform>
								<Path.Fill>
									<SolidColorBrush Color="{StaticResource CheckBgColor}"/>
								</Path.Fill>
							</Path>
						</Border>
						<ToggleButton x:Name="Expander"
							Grid.Column="0"
							Style="{StaticResource TreeViewToggleButton}"
							MinWidth="{TemplateBinding MinHeight}"
							IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"/>
						<Border x:Name="BaseBorder"
							Grid.Column="1"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"/>
						<Border x:Name="OverBorder"
							Grid.Column="1"
							BorderThickness="{TemplateBinding BorderThickness}">
							<Border.Background>
								<SolidColorBrush Color="{StaticResource OverOverlay}" Opacity="0"/>
							</Border.Background>
						</Border>
						<Border x:Name="FocusBorder"
							Grid.Column="1"
							BorderThickness="1">
							<Border.BorderBrush>
								<SolidColorBrush Color="{StaticResource FocusShineColor}" Opacity="0"/>
							</Border.BorderBrush>
							<Border.Background>
								<SolidColorBrush Color="{StaticResource FocusGlowColor}" Opacity="0"/>
							</Border.Background>
						</Border>
						<Border x:Name="Border"
							Grid.Column="1"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							Padding="{TemplateBinding Padding}">
							<ContentPresenter x:Name="PART_Header"
								ContentSource="Header"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
								<TextElement.Foreground>
									<SolidColorBrush Color="{StaticResource NormalFgColor}"/>
								</TextElement.Foreground>
							</ContentPresenter>
						</Border>
						<ItemsPresenter x:Name="ItemsHost"
							Grid.Column="1"
							Grid.ColumnSpan="2"
							Grid.Row="1"
							Opacity="0" Visibility="Collapsed" Margin="0,1,0,-1">
							<ItemsPresenter.LayoutTransform>
								<ScaleTransform ScaleY="0.01"/>
							</ItemsPresenter.LayoutTransform>
						</ItemsPresenter>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="HasItems" Value="False">
							<Setter TargetName="Expander" Property="Visibility" Value="Hidden"/>
							<Setter TargetName="ArrowBorder" Property="Visibility" Value="Hidden"/>
						</Trigger>
						<Trigger SourceName="Expander" Property="IsMouseOver" Value="True">
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource ExpanderMouseOverOff}"/>
							</Trigger.ExitActions>
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource ExpanderMouseOverOn}"/>
							</Trigger.EnterActions>
						</Trigger>
						<Trigger SourceName="Border" Property="IsMouseOver" Value="True">
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource HeaderMouseOverOff}"/>
							</Trigger.ExitActions>
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource HeaderMouseOverOn}"/>
							</Trigger.EnterActions>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<!-- ============== STATUS BAR ============== -->

	<!-- StatusBar Style -->
	<Style TargetType="{x:Type StatusBar}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="Background" Value="{StaticResource TrackBgBrush}"/>
		<Setter Property="BorderBrush" Value="{x:Null}"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="MinHeight" Value="15"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type StatusBar}">
					<ControlTemplate.Resources>
						<Storyboard x:Key="OnDisabled">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="DisabledBorder">
								<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="OnEnabled">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="DisabledBorder">
								<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<Grid>
						<Border x:Name="BaseBorder"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"/>
						<Border x:Name="DisabledBorder"
							BorderThickness="{TemplateBinding BorderThickness}">
							<Border.Background>
								<SolidColorBrush Color="{StaticResource DisabledOverlay}" Opacity="0"/>
							</Border.Background>
						</Border>
						<Border
							BorderThickness="{TemplateBinding BorderThickness}"
							Padding="{TemplateBinding Padding}">
							<DockPanel IsItemsHost="True"/>
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource OnEnabled}"/>
							</Trigger.ExitActions>
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource OnDisabled}"/>
							</Trigger.EnterActions>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Separator Style -->
	<Style x:Key="{x:Static StatusBar.SeparatorStyleKey}" TargetType="{x:Type Separator}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="OverridesDefaultStyle" Value="True"/>
		<Setter Property="Focusable" Value="false"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Separator}">
					<Rectangle
						Fill="{StaticResource TrackDarkBdBrush}"
						Width="1"
						Margin="4,0"/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- StatusBarItem Style -->
	<Style TargetType="{x:Type StatusBarItem}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderBrush" Value="{x:Null}"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="Padding" Value="4"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type StatusBarItem}">
					<ControlTemplate.Resources>
						<Storyboard x:Key="OnDisabled">
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="ContentHost">
								<EasingColorKeyFrame KeyTime="0:0:0.1" Value="{StaticResource DisabledFgColor}"/>
							</ColorAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="OnEnabled">
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="ContentHost">
								<EasingColorKeyFrame KeyTime="0:0:0.1" Value="{StaticResource NormalFgColor}"/>
							</ColorAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<Grid>
						<Border x:Name="BaseBorder"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"/>
						<Border
							BorderThickness="{TemplateBinding BorderThickness}"
							Padding="{TemplateBinding Padding}">
							<ContentPresenter x:Name="ContentHost"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
								<TextElement.Foreground>
									<SolidColorBrush Color="{StaticResource NormalFgColor}"/>
								</TextElement.Foreground>
							</ContentPresenter>
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource OnEnabled}"/>
							</Trigger.ExitActions>
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource OnDisabled}"/>
							</Trigger.EnterActions>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<!-- ============== TOOL BAR ============== -->

	<!-- ToolBarOverflowButton Style -->
	<Style x:Key="ToolBarOverflowButton" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Grid
						Width="16"
						Background="Transparent">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
									<VisualTransition From="MouseOver" GeneratedDuration="0:0:0.3"/>
									<VisualTransition GeneratedDuration="0:0:0.1" To="Disabled"/>
									<VisualTransition From="Disabled" GeneratedDuration="0:0:0.1"/>
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Normal"/>
								<VisualState x:Name="MouseOver">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="BaseOverBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="BaseOverBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Pressed"/>
								<VisualState x:Name="Disabled">
									<Storyboard>
										<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="Arrow">
											<EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledCheckBgColor}"/>
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="CheckStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0:0:0.1" To="Checked"/>
									<VisualTransition From="Checked" GeneratedDuration="0:0:0.3"/>
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Checked">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="BaseCheckBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="BaseCheckBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="CheckBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Unchecked"/>
								<VisualState x:Name="Indeterminate"/>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Border x:Name="BaseOverBorder"
							BorderThickness="1">
							<Border.Background>
								<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0" GradientStops="{StaticResource NormalBgRamp}" Opacity="0"/>
							</Border.Background>
							<Border.BorderBrush>
								<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0" GradientStops="{StaticResource NormalBdRamp}" Opacity="0"/>
							</Border.BorderBrush>
							<Border x:Name="OverBorder">
								<Border.Background>
									<SolidColorBrush Color="{StaticResource OverOverlay}" Opacity="0"/>
								</Border.Background>
							</Border>
						</Border>
						<Border x:Name="BaseCheckBorder"
							BorderThickness="1">
							<Border.Background>
								<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0" GradientStops="{StaticResource NormalBgRamp}" Opacity="0"/>
							</Border.Background>
							<Border.BorderBrush>
								<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0" GradientStops="{StaticResource NormalBdRamp}" Opacity="0"/>
							</Border.BorderBrush>
							<Border x:Name="CheckBorder">
								<Border.Background>
									<SolidColorBrush Color="{StaticResource PressOverlay}" Opacity="0"/>
								</Border.Background>
							</Border>
						</Border>
						<Border x:Name="Bd"
							BorderThickness="{TemplateBinding BorderThickness}">
							<Path x:Name="Arrow"
								Margin="4,3"
								Data="M0,0 L6,0 6,2 0,2Z M0,3 L6,3 3,9 Z"
								HorizontalAlignment="Center"
								VerticalAlignment="Bottom">
								<Path.Fill>
									<SolidColorBrush Color="{StaticResource CheckBgColor}"/>
								</Path.Fill>
							</Path>
						</Border>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- ToolBarThumb Style -->
	<Style x:Key="ToolBarThumb" TargetType="{x:Type Thumb}">
		<Setter Property="OverridesDefaultStyle" Value="True"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Grid Background="Transparent">
						<StackPanel Margin="4,0" VerticalAlignment="Center">
							<Border Background="{StaticResource NormalDarkBdBrush}" Margin="0,1" Width="2" Height="2"/>
							<Border Background="{StaticResource NormalDarkBdBrush}" Margin="0,1" Width="2" Height="2"/>
							<Border Background="{StaticResource NormalDarkBdBrush}" Margin="0,1" Width="2" Height="2"/>
							<Border Background="{StaticResource NormalDarkBdBrush}" Margin="0,1" Width="2" Height="2"/>
						</StackPanel>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- ToolBar Style -->
	<Style TargetType="{x:Type ToolBar}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="Background" Value="{StaticResource NormalDarkBgBrush}"/>
		<Setter Property="BorderBrush" Value="{x:Null}"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="MinHeight" Value="15"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToolBar}">
					<ControlTemplate.Resources>
						<Storyboard x:Key="OnDisabled">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="DisabledBorder">
								<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="ToolBarHeader">
								<EasingColorKeyFrame KeyTime="0:0:0.1" Value="{StaticResource DisabledFgColor}"/>
							</ColorAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="OnEnabled">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="DisabledBorder">
								<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
							<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="ToolBarHeader">
								<EasingColorKeyFrame KeyTime="0:0:0.1" Value="{StaticResource NormalFgColor}"/>
							</ColorAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto"/>
							<ColumnDefinition Width="Auto"/>
							<ColumnDefinition Width="*"/>
							<ColumnDefinition Width="Auto"/>
						</Grid.ColumnDefinitions>
						<Border x:Name="MainPanelBorder"
							Grid.ColumnSpan="4"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"/>
						<Thumb x:Name="ToolBarThumb"
							Grid.Column="0"
							Style="{StaticResource ToolBarThumb}"/>
						<Border x:Name="DisabledBorder"
							Grid.ColumnSpan="4"
							BorderThickness="{TemplateBinding BorderThickness}">
							<Border.Background>
								<SolidColorBrush Color="{StaticResource DisabledOverlay}" Opacity="0"/>
							</Border.Background>
						</Border>
						<ContentPresenter x:Name="ToolBarHeader"
							Grid.Column="1"
							ContentSource="Header"
							VerticalAlignment="Center">
							<TextElement.Foreground>
								<SolidColorBrush Color="{StaticResource NormalFgColor}"/>
							</TextElement.Foreground>
						</ContentPresenter>
						<ToolBarPanel x:Name="PART_ToolBarPanel"
							Grid.Column="2"
							IsItemsHost="True"/>
						<Grid x:Name="OverflowGrid"
							Grid.Column="3">
							<ToggleButton x:Name="OverflowButton"
								Style="{StaticResource ToolBarOverflowButton}"
								IsEnabled="false"
								ClickMode="Press"
								IsChecked="{Binding IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
							<Popup x:Name="OverflowPopup"
								IsOpen="{Binding IsOverflowOpen, RelativeSource={RelativeSource TemplatedParent}}"
								Placement="Bottom"
								StaysOpen="True"
								Focusable="False">
								<Border
									Background="{StaticResource TrackBgBrush}"
									BorderBrush="{StaticResource TrackBdBrush}"
									BorderThickness="1"
									CornerRadius="0,0,1,1">
									<ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel"
										Focusable="True"
										KeyboardNavigation.DirectionalNavigation="Cycle"
										KeyboardNavigation.TabNavigation="Cycle"
										WrapWidth="200"
										Margin="{TemplateBinding Padding}"/>
								</Border>
							</Popup>
						</Grid>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsOverflowOpen" Value="true">
							<Setter Property="IsEnabled" TargetName="ToolBarThumb" Value="False"/>
						</Trigger>
						<Trigger Property="HasOverflowItems" Value="true">
							<Setter Property="IsEnabled" TargetName="OverflowButton" Value="True"/>
						</Trigger>
						<Trigger Property="Header" Value="{x:Null}">
							<Setter Property="Visibility" TargetName="ToolBarHeader" Value="Collapsed"/>
						</Trigger>
						<Trigger Property="ToolBarTray.IsLocked" Value="true">
							<Setter Property="Visibility" TargetName="ToolBarThumb" Value="Collapsed"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource OnEnabled}"/>
							</Trigger.ExitActions>
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource OnDisabled}"/>
							</Trigger.EnterActions>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- ToolBar.Separator Style -->
	<Style x:Key="{x:Static ToolBar.SeparatorStyleKey}" TargetType="{x:Type Separator}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="Focusable" Value="False"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Separator}">
					<Rectangle
						Fill="{StaticResource NormalDarkBdBrush}"
						Width="1"
						Margin="3,2,4,2"/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- ToolBar.Button Style -->
	<Style x:Key="{x:Static ToolBar.ButtonStyleKey}" TargetType="{x:Type Button}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderBrush" Value="Transparent"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="Padding" Value="2"/>
		<Setter Property="Margin" Value="0,2,1,2"/>
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
									<VisualTransition From="MouseOver" GeneratedDuration="0:0:0.3"/>
									<VisualTransition GeneratedDuration="0" To="Pressed"/>
									<VisualTransition From="Pressed" GeneratedDuration="0:0:0.2"/>
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Normal"/>
								<VisualState x:Name="MouseOver">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="0.7"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Pressed">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="OverBorder">
											<EasingColorKeyFrame KeyTime="0" Value="{StaticResource PressOverlay}"/>
										</ColorAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Disabled"/>
							</VisualStateGroup>
							<VisualStateGroup x:Name="FocusStates">
								<VisualState x:Name="Unfocused"/>
								<VisualState x:Name="Focused"/>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Border x:Name="BaseBorder"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							CornerRadius="1"/>
						<Border x:Name="OverBorder"
							BorderThickness="{TemplateBinding BorderThickness}"
							CornerRadius="1">
							<Border.Background>
								<SolidColorBrush Color="{StaticResource OverOverlay}" Opacity="0"/>
							</Border.Background>
							<Border.BorderBrush>
								<SolidColorBrush Color="{StaticResource NormalBdColor}" Opacity="0"/>
							</Border.BorderBrush>
						</Border>
						<Border
							BorderThickness="{TemplateBinding BorderThickness}"
							Padding="{TemplateBinding Padding}">
							<ContentPresenter
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
						</Border>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- ToolBar.ToggleButton Style -->
	<Style x:Key="{x:Static ToolBar.ToggleButtonStyleKey}" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderBrush" Value="Transparent"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="Padding" Value="2"/>
		<Setter Property="Margin" Value="0,2,1,2"/>
		<Setter Property="ClickMode" Value="Press"/>
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Grid>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
									<VisualTransition From="MouseOver" GeneratedDuration="0:0:0.3"/>
									<VisualTransition GeneratedDuration="0" To="Pressed"/>
									<VisualTransition From="Pressed" GeneratedDuration="0:0:0.2"/>
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Normal"/>
								<VisualState x:Name="MouseOver">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="0.7"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Pressed">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="OverBorder">
											<EasingColorKeyFrame KeyTime="0" Value="{StaticResource PressOverlay}"/>
										</ColorAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Disabled">
									<Storyboard>
										<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" Storyboard.TargetName="CheckBorder">
											<EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledCheckBgColor}"/>
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="FocusStates">
								<VisualState x:Name="Unfocused"/>
								<VisualState x:Name="Focused"/>
							</VisualStateGroup>
							<VisualStateGroup x:Name="CheckStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0:0:0.1" To="Checked"/>
									<VisualTransition From="Checked" GeneratedDuration="0:0:0.3"/>
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Checked">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="CheckBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Unchecked"/>
								<VisualState x:Name="Indeterminate"/>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Border x:Name="BaseBorder"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							CornerRadius="1"/>
						<Border x:Name="OverBorder"
							BorderThickness="{TemplateBinding BorderThickness}"
							CornerRadius="1">
							<Border.Background>
								<SolidColorBrush Color="{StaticResource OverOverlay}" Opacity="0"/>
							</Border.Background>
							<Border.BorderBrush>
								<SolidColorBrush Color="{StaticResource NormalBdColor}" Opacity="0"/>
							</Border.BorderBrush>
						</Border>
						<Border x:Name="CheckBorder"
							BorderThickness="{TemplateBinding BorderThickness}"
							CornerRadius="1">
							<Border.BorderBrush>
								<SolidColorBrush Color="{StaticResource CheckBgColor}" Opacity="0"/>
							</Border.BorderBrush>
						</Border>
						<Border
							BorderThickness="{TemplateBinding BorderThickness}"
							Padding="{TemplateBinding Padding}">
							<ContentPresenter
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
						</Border>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- ToolBar.CheckBox Style -->
	<Style x:Key="{x:Static ToolBar.CheckBoxStyleKey}" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderBrush" Value="Transparent"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="Padding" Value="2"/>
		<Setter Property="Margin" Value="0,2,1,2"/>
		<Setter Property="ClickMode" Value="Press"/>
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type CheckBox}">
					<Grid>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
									<VisualTransition From="MouseOver" GeneratedDuration="0:0:0.3"/>
									<VisualTransition GeneratedDuration="0" To="Pressed"/>
									<VisualTransition From="Pressed" GeneratedDuration="0:0:0.2"/>
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Normal"/>
								<VisualState x:Name="MouseOver">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="0.7"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Pressed">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="OverBorder">
											<EasingColorKeyFrame KeyTime="0" Value="{StaticResource PressOverlay}"/>
										</ColorAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Disabled">
									<Storyboard>
										<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" Storyboard.TargetName="CheckBorder">
											<EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledCheckBgColor}"/>
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="FocusStates">
								<VisualState x:Name="Unfocused"/>
								<VisualState x:Name="Focused"/>
							</VisualStateGroup>
							<VisualStateGroup x:Name="CheckStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0:0:0.1" To="Checked"/>
									<VisualTransition From="Checked" GeneratedDuration="0:0:0.3"/>
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Checked">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="CheckBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Unchecked"/>
								<VisualState x:Name="Indeterminate"/>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Border x:Name="BaseBorder"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							CornerRadius="1"/>
						<Border x:Name="OverBorder"
							BorderThickness="{TemplateBinding BorderThickness}"
							CornerRadius="1">
							<Border.Background>
								<SolidColorBrush Color="{StaticResource OverOverlay}" Opacity="0"/>
							</Border.Background>
							<Border.BorderBrush>
								<SolidColorBrush Color="{StaticResource NormalBdColor}" Opacity="0"/>
							</Border.BorderBrush>
						</Border>
						<Border x:Name="CheckBorder"
							BorderThickness="{TemplateBinding BorderThickness}"
							CornerRadius="1">
							<Border.BorderBrush>
								<SolidColorBrush Color="{StaticResource CheckBgColor}" Opacity="0"/>
							</Border.BorderBrush>
						</Border>
						<Border
							BorderThickness="{TemplateBinding BorderThickness}"
							Padding="{TemplateBinding Padding}">
							<ContentPresenter
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
						</Border>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- ToolBar.RadioButton Style -->
	<Style x:Key="{x:Static ToolBar.RadioButtonStyleKey}" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderBrush" Value="Transparent"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="Padding" Value="2"/>
		<Setter Property="Margin" Value="0,2,1,2"/>
		<Setter Property="ClickMode" Value="Press"/>
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RadioButton}">
					<Grid>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
									<VisualTransition From="MouseOver" GeneratedDuration="0:0:0.3"/>
									<VisualTransition GeneratedDuration="0" To="Pressed"/>
									<VisualTransition From="Pressed" GeneratedDuration="0:0:0.2"/>
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Normal"/>
								<VisualState x:Name="MouseOver">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="0.7"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Pressed">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="OverBorder">
											<EasingColorKeyFrame KeyTime="0" Value="{StaticResource PressOverlay}"/>
										</ColorAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Disabled">
									<Storyboard>
										<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)" Storyboard.TargetName="CheckBorder">
											<EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledCheckBgColor}"/>
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="FocusStates">
								<VisualState x:Name="Unfocused"/>
								<VisualState x:Name="Focused"/>
							</VisualStateGroup>
							<VisualStateGroup x:Name="CheckStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0:0:0.1" To="Checked"/>
									<VisualTransition From="Checked" GeneratedDuration="0:0:0.3"/>
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Checked">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="CheckBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Unchecked"/>
								<VisualState x:Name="Indeterminate"/>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Border x:Name="BaseBorder"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							CornerRadius="1"/>
						<Border x:Name="OverBorder"
							BorderThickness="{TemplateBinding BorderThickness}"
							CornerRadius="1">
							<Border.Background>
								<SolidColorBrush Color="{StaticResource OverOverlay}" Opacity="0"/>
							</Border.Background>
							<Border.BorderBrush>
								<SolidColorBrush Color="{StaticResource NormalBdColor}" Opacity="0"/>
							</Border.BorderBrush>
						</Border>
						<Border x:Name="CheckBorder"
							BorderThickness="{TemplateBinding BorderThickness}"
							CornerRadius="1">
							<Border.BorderBrush>
								<SolidColorBrush Color="{StaticResource CheckBgColor}" Opacity="0"/>
							</Border.BorderBrush>
						</Border>
						<Border
							BorderThickness="{TemplateBinding BorderThickness}"
							Padding="{TemplateBinding Padding}">
							<ContentPresenter
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
						</Border>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- ToolBar.TextBox Style -->
	<Style x:Key="{x:Static ToolBar.TextBoxStyleKey}" TargetType="{x:Type TextBox}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="Background" Value="{StaticResource TrackBgBrush}"/>
		<Setter Property="BorderBrush" Value="Transparent"/>
		<Setter Property="CaretBrush" Value="{StaticResource CaretBrush}"/>
		<Setter Property="SelectionBrush" Value="{StaticResource SelectionBrush}"/>
		<Setter Property="SelectionOpacity" Value="0.5"/>
		<Setter Property="Padding" Value="1,2"/>
		<Setter Property="Margin" Value="0,2,1,2"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TextBox}">
					<Grid>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
									<VisualTransition From="MouseOver" GeneratedDuration="0:0:0.3"/>
									<VisualTransition GeneratedDuration="0:0:0.1" To="Disabled"/>
									<VisualTransition From="Disabled" GeneratedDuration="0:0:0.1"/>
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Normal"/>
								<VisualState x:Name="Disabled">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="DisabledBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="ReadOnly"/>
								<VisualState x:Name="MouseOver">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="FocusStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0:0:0.1" To="Focused"/>
									<VisualTransition From="Focused" GeneratedDuration="0:0:0.3"/>
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Unfocused"/>
								<VisualState x:Name="Focused">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="FocusBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="FocusInnerBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Border x:Name="BaseBorder"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"/>
						<Border x:Name="OverBorder"
							BorderThickness="{TemplateBinding BorderThickness}">
							<Border.Background>
								<SolidColorBrush Color="{StaticResource OverOverlay}" Opacity="0"/>
							</Border.Background>
							<Border.BorderBrush>
								<SolidColorBrush Color="{StaticResource NormalDarkBdColor}" Opacity="0"/>
							</Border.BorderBrush>
						</Border>
						<Border x:Name="FocusBorder"
							BorderThickness="{TemplateBinding BorderThickness}">
							<Border.BorderBrush>
								<SolidColorBrush Color="{StaticResource FocusColor}" Opacity="0"/>
							</Border.BorderBrush>
							<Border x:Name="FocusInnerBorder"
								BorderThickness="1">
								<Border.BorderBrush>
									<SolidColorBrush Color="{StaticResource FocusShineColor}" Opacity="0"/>
								</Border.BorderBrush>
							</Border>
						</Border>
						<Border x:Name="DisabledBorder"
							BorderThickness="{TemplateBinding BorderThickness}">
							<Border.Background>
								<SolidColorBrush Color="{StaticResource DisabledOverlay}" Opacity="0"/>
							</Border.Background>
						</Border>
						<Border BorderThickness="{TemplateBinding BorderThickness}">
							<ScrollViewer x:Name="PART_ContentHost"
								Focusable="False"
								Template="{StaticResource SimpleScrollViewer}"
								Padding="{TemplateBinding Padding}"
								Foreground="{TemplateBinding Foreground}"/>
						</Border>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- ToolBar.ComboBox Style -->
	<Style x:Key="{x:Static ToolBar.ComboBoxStyleKey}" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="Background" Value="{StaticResource TrackBgBrush}"/>
		<Setter Property="BorderBrush" Value="Transparent"/>
		<Setter Property="MinHeight" Value="15"/>
		<Setter Property="Padding" Value="1,2"/>
		<Setter Property="Margin" Value="0,2,1,2"/>
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
		<Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
		<Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBox}">
					<Grid>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="FocusStates">
								<VisualStateGroup.Transitions>
									<VisualTransition From="Focused" GeneratedDuration="0:0:0.2" To="FocusedDropDown"/>
									<VisualTransition From="Unfocused" GeneratedDuration="0:0:0.1" To="Focused"/>
									<VisualTransition From="FocusedDropDown" GeneratedDuration="0:0:0.2"/>
									<VisualTransition From="Unfocused" GeneratedDuration="0:0:0.2" To="FocusedDropDown"/>
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Unfocused"/>
								<VisualState x:Name="Focused">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="FocusLeftBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="FocusLeftInnerBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="FocusLeftInnerBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="FocusRightBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="FocusRightInnerBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="FocusRightInnerBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="FocusSeparatorBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="FocusSeparatorInnerBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="FocusSeparatorInnerBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="FocusedDropDown">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="FocusLeftBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="FocusLeftInnerBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="FocusLeftInnerBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="FocusRightBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="FocusRightInnerBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="FocusRightInnerBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="FocusSeparatorBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="FocusSeparatorInnerBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="FocusSeparatorInnerBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)" Storyboard.TargetName="Arrow">
											<EasingDoubleKeyFrame KeyTime="0" Value="-180"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="CommonStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
									<VisualTransition From="MouseOver" GeneratedDuration="0:0:0.3"/>
									<VisualTransition GeneratedDuration="0:0:0.1" To="Disabled"/>
									<VisualTransition From="Disabled" GeneratedDuration="0:0:0.1"/>
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Normal"/>
								<VisualState x:Name="MouseOver">
									<Storyboard>
										<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="ContentHost">
											<EasingColorKeyFrame KeyTime="0" Value="{StaticResource OverFgColor}"/>
										</ColorAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="EditOverBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Disabled">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="DisableBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="Arrow">
											<EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledCheckBgColor}"/>
										</ColorAnimationUsingKeyFrames>
										<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Stroke).(SolidColorBrush.Color)" Storyboard.TargetName="Arrow">
											<EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledCheckBdColor}"/>
										</ColorAnimationUsingKeyFrames>
										<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="ContentHost">
											<EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledFgColor}"/>
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="EditStates">
								<VisualState x:Name="Editable">
									<Storyboard>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="FocusSeparatorBorder">
											<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
										</ObjectAnimationUsingKeyFrames>
										<ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Margin)" Storyboard.TargetName="FocusLeftBorder">
											<EasingThicknessKeyFrame KeyTime="0" Value="0,0,2,0"/>
										</ThicknessAnimationUsingKeyFrames>
										<ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Margin)" Storyboard.TargetName="FocusRightBorder">
											<EasingThicknessKeyFrame KeyTime="0" Value="1,0,0,0"/>
										</ThicknessAnimationUsingKeyFrames>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="ContentBorder">
											<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}"/>
										</ObjectAnimationUsingKeyFrames>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="EditableBorder">
											<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
										</ObjectAnimationUsingKeyFrames>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="EditOverBorder">
											<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Uneditable"/>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="*"/>
								<ColumnDefinition Width="Auto"/>
							</Grid.ColumnDefinitions>
							<Border x:Name="BaseBorder"
								Grid.Column="0"
								Grid.ColumnSpan="2"
								Background="{TemplateBinding Background}"
								BorderBrush="{TemplateBinding BorderBrush}"/>
							<Border x:Name="OverBorder"
								Grid.Column="0"
								Grid.ColumnSpan="2"
								BorderThickness="{TemplateBinding BorderThickness}">
								<Border.BorderBrush>
									<SolidColorBrush Color="{StaticResource NormalDarkBdColor}" Opacity="0"/>
								</Border.BorderBrush>
							</Border>
							<Border x:Name="EditOverBorder"
								Grid.Column="0"
								BorderThickness="0,0,1,0"
								Visibility="Collapsed">
								<Border.BorderBrush>
									<SolidColorBrush Color="{StaticResource TrackDarkBdColor}" Opacity="0"/>
								</Border.BorderBrush>
							</Border>
							<Border x:Name="FocusLeftBorder"
								BorderThickness="1,1,0,1">
								<Border.BorderBrush>
									<SolidColorBrush Color="{StaticResource FocusColor}" Opacity="0"/>
								</Border.BorderBrush>
								<Border x:Name="FocusLeftInnerBorder"
									BorderThickness="1,1,0,1">
									<Border.Background>
										<SolidColorBrush Color="{StaticResource FocusGlowColor}" Opacity="0"/>
									</Border.Background>
									<Border.BorderBrush>
										<SolidColorBrush Color="{StaticResource FocusShineColor}" Opacity="0"/>
									</Border.BorderBrush>
								</Border>
							</Border>
							<Border x:Name="FocusRightBorder"
								Grid.Column="1"
								BorderThickness="0,1,1,1">
								<Border.BorderBrush>
									<SolidColorBrush Color="{StaticResource FocusColor}" Opacity="0"/>
								</Border.BorderBrush>
								<Border x:Name="FocusRightInnerBorder"
									BorderThickness="0,1,1,1">
									<Border.Background>
										<SolidColorBrush Color="{StaticResource FocusGlowColor}" Opacity="0"/>
									</Border.Background>
									<Border.BorderBrush>
										<SolidColorBrush Color="{StaticResource FocusShineColor}" Opacity="0"/>
									</Border.BorderBrush>
								</Border>
							</Border>
							<Border x:Name="FocusSeparatorBorder"
								BorderThickness="0,1"
								Margin="0,0,-1,0"
								HorizontalAlignment="Right"
								Visibility="Collapsed">
								<Border.BorderBrush>
									<SolidColorBrush Color="{StaticResource FocusColor}" Opacity="0"/>
								</Border.BorderBrush>
								<Border x:Name="FocusSeparatorInnerBorder"
									BorderThickness="1,0" Width="3">
									<Border.BorderBrush>
										<SolidColorBrush Color="{StaticResource FocusShineColor}" Opacity="0"/>
									</Border.BorderBrush>
									<Border.Background>
										<SolidColorBrush Color="{StaticResource FocusColor}" Opacity="0"/>
									</Border.Background>
								</Border>
							</Border>
							<Border x:Name="DisableBorder"
								Grid.Column="0" Grid.ColumnSpan="2"
								BorderThickness="{TemplateBinding BorderThickness}">
								<Border.Background>
									<SolidColorBrush Color="{StaticResource DisabledOverlay}" Opacity="0"/>
								</Border.Background>
							</Border>
							<ToggleButton x:Name="DropDownButton"
								Grid.ColumnSpan="2"
								Style="{StaticResource ComboBoxToggleButton}"
								MinWidth="{TemplateBinding MinHeight}"
								IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
							<Border x:Name="ContentBorder"
								Grid.Column="0"
								Margin="{TemplateBinding BorderThickness}"
								Padding="{TemplateBinding Padding}"
								Visibility="Visible">
								<ContentPresenter x:Name="ContentHost"
									HorizontalAlignment="Left"
									VerticalAlignment="Center"
									ContentSource="SelectionBoxItem"
									IsHitTestVisible="False"
									Margin="2,0,0,0">
									<TextElement.Foreground>
										<SolidColorBrush Color="{StaticResource NormalFgColor}"/>
									</TextElement.Foreground>
								</ContentPresenter>
							</Border>
							<Border x:Name="EditableBorder"
								Grid.Column="0"
								Margin="{TemplateBinding BorderThickness}"
								Padding="{TemplateBinding Padding}"
								Visibility="Hidden">
								<TextBox x:Name="PART_EditableTextBox"
									VerticalAlignment="Center"
									Focusable="True"
									IsReadOnly="{TemplateBinding IsReadOnly}"
									Style="{StaticResource ComboBoxTextBox}"
									Margin="2,0,0,0"
									Foreground="{TemplateBinding Foreground}"/>
							</Border>
							<Border x:Name="ArrowBorder"
								Grid.Column="1"
								BorderThickness="{TemplateBinding BorderThickness}"
								Margin="0,1,0,0"
								IsHitTestVisible="False">
								<Border
									Width="{TemplateBinding MinHeight}"
									Height="{TemplateBinding MinHeight}">
									<Path x:Name="Arrow"
										Margin="3"
										Stretch="Fill"
										Data="M0,0 L8,0 4,4 Z" StrokeThickness="0.25" RenderTransformOrigin="0.5,0.4">
										<Path.RenderTransform>
											<TransformGroup>
												<ScaleTransform/>
												<SkewTransform/>
												<RotateTransform/>
												<TranslateTransform/>
											</TransformGroup>
										</Path.RenderTransform>
										<Path.Stroke>
											<SolidColorBrush Color="{StaticResource CheckBdColor}"/>
										</Path.Stroke>
										<Path.Fill>
											<SolidColorBrush Color="{StaticResource CheckBgColor}"/>
										</Path.Fill>
									</Path>
								</Border>
							</Border>
						</Grid>
						<Popup x:Name="PART_Popup"
							IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
							Focusable="False"
							Placement="Bottom"
							PopupAnimation="Slide"
							VerticalOffset="1"
							AllowsTransparency="True">
							<Border x:Name="DropDownBorder"
								BorderBrush="{StaticResource TrackBdBrush}"
								MaxHeight="{TemplateBinding MaxDropDownHeight}"
								MinWidth="{TemplateBinding ActualWidth}"
								BorderThickness="1"
								CornerRadius="1">
								<Border.Background>
									<SolidColorBrush Color="{StaticResource TrackBgColor}" Opacity="0.95"/>
								</Border.Background>
								<ScrollViewer>
									<StackPanel
										IsItemsHost="True"
										KeyboardNavigation.DirectionalNavigation="Contained"/>
								</ScrollViewer>
							</Border>
						</Popup>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="HasItems" Value="False">
							<Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- ToolBar.Menu Style -->
	<Style x:Key="{x:Static ToolBar.MenuStyleKey}" TargetType="{x:Type Menu}" BasedOn="{StaticResource NoesisControlStyle}">
		<Style.Resources>
			<Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource NoesisControlStyle}">
				<Setter Property="Background" Value="Transparent"/>
				<Setter Property="BorderBrush" Value="Transparent"/>
				<Setter Property="Padding" Value="1,2"/>
				<Setter Property="Margin" Value="0,2,1,2"/>
				<Style.Triggers>
					<Trigger Property="Role" Value="TopLevelHeader">
						<Setter Property="Template">
							<Setter.Value>
								<ControlTemplate TargetType="{x:Type MenuItem}">
									<ControlTemplate.Resources>
										<Storyboard x:Key="HighlightOn">
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
												<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Control.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
												<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0.7"/>
											</DoubleAnimationUsingKeyFrames>
											<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="HeaderHost">
												<EasingColorKeyFrame KeyTime="0:0:0.1" Value="{StaticResource OverFgColor}"/>
											</ColorAnimationUsingKeyFrames>
										</Storyboard>
										<Storyboard x:Key="HighlightOff">
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
												<EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
											</DoubleAnimationUsingKeyFrames>
											<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Control.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
												<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
											</DoubleAnimationUsingKeyFrames>
											<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="HeaderHost">
												<EasingColorKeyFrame KeyTime="0:0:0.3" Value="{StaticResource NormalFgColor}"/>
											</ColorAnimationUsingKeyFrames>
										</Storyboard>
										<Storyboard x:Key="OnDisabled">
											<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="HeaderHost">
												<EasingColorKeyFrame KeyTime="0:0:0.1" Value="{StaticResource DisabledFgColor}"/>
											</ColorAnimationUsingKeyFrames>
										</Storyboard>
										<Storyboard x:Key="OnEnabled">
											<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="HeaderHost">
												<EasingColorKeyFrame KeyTime="0:0:0.1" Value="{StaticResource NormalFgColor}"/>
											</ColorAnimationUsingKeyFrames>
										</Storyboard>
									</ControlTemplate.Resources>
									<Grid>
										<Grid.ColumnDefinitions>
											<ColumnDefinition Width="*"/>
											<ColumnDefinition Width="Auto"/>
										</Grid.ColumnDefinitions>
										<Border x:Name="BaseBorder"
											Grid.Column="0"
											Grid.ColumnSpan="2"
											Background="{TemplateBinding Background}"
											BorderBrush="{TemplateBinding BorderBrush}"
											BorderThickness="{TemplateBinding BorderThickness}"/>
										<Border x:Name="OverBorder"
											Grid.Column="0"
											Grid.ColumnSpan="2"
											BorderThickness="{TemplateBinding BorderThickness}">
											<Border.Background>
												<SolidColorBrush Color="{StaticResource OverOverlay}" Opacity="0"/>
											</Border.Background>
											<Border.BorderBrush>
												<SolidColorBrush Color="{StaticResource NormalBdColor}" Opacity="0"/>
											</Border.BorderBrush>
										</Border>
										<Border x:Name="Header"
											BorderThickness="{TemplateBinding BorderThickness}"
											Padding="{TemplateBinding Padding}">
											<ContentPresenter x:Name="HeaderHost"
												ContentSource="Header"
												VerticalAlignment="Center">
												<TextElement.Foreground>
													<SolidColorBrush Color="{StaticResource NormalFgColor}"/>
												</TextElement.Foreground>
											</ContentPresenter>
										</Border>
										<Border
											Grid.Column="1"
											BorderThickness="{TemplateBinding BorderThickness}">
											<Path
												Fill="{StaticResource SelectionBrush}"
												HorizontalAlignment="Center"
												VerticalAlignment="Center"
												Margin="-1,0,2,0"
												Data="M0,0L4,0 2,4Z"/>
										</Border>
										<Popup x:Name="Popup"
											AllowsTransparency="True"
											Focusable="False"
											IsOpen="{TemplateBinding IsSubmenuOpen}"
											Placement="Bottom"
											PopupAnimation="Fade">
											<Border x:Name="SubmenuBorder"
												BorderBrush="{StaticResource TrackBdBrush}"
												BorderThickness="1"
												CornerRadius="0,0,1,1">
												<Border.Background>
													<SolidColorBrush Color="{StaticResource TrackBgColor}" Opacity="0.95"/>
												</Border.Background>
												<StackPanel
													IsItemsHost="True"
													Grid.IsSharedSizeScope="True"
													KeyboardNavigation.DirectionalNavigation="Cycle"/>
											</Border>
										</Popup>
									</Grid>
									<ControlTemplate.Triggers>
										<Trigger Property="IsHighlighted" Value="true">
											<Trigger.ExitActions>
												<BeginStoryboard Storyboard="{StaticResource HighlightOff}"/>
											</Trigger.ExitActions>
											<Trigger.EnterActions>
												<BeginStoryboard Storyboard="{StaticResource HighlightOn}"/>
											</Trigger.EnterActions>
										</Trigger>
										<Trigger Property="IsEnabled" Value="False">
											<Trigger.ExitActions>
												<BeginStoryboard Storyboard="{StaticResource OnEnabled}"/>
											</Trigger.ExitActions>
											<Trigger.EnterActions>
												<BeginStoryboard Storyboard="{StaticResource OnDisabled}"/>
											</Trigger.EnterActions>
										</Trigger>
									</ControlTemplate.Triggers>
								</ControlTemplate>
							</Setter.Value>
						</Setter>
					</Trigger>
				</Style.Triggers>
			</Style>
		</Style.Resources>
		<Setter Property="Background" Value="{x:Null}"/>
		<Setter Property="BorderBrush" Value="{x:Null}"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Menu}">
					<Grid>
						<Border x:Name="BaseBorder"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"/>
						<Border
							BorderThickness="{TemplateBinding BorderThickness}"
							Padding="{TemplateBinding Padding}">
							<StackPanel IsItemsHost="True" Orientation="Horizontal"/>
						</Border>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- ========== LIST VIEW ============== -->

	<!-- ListView ScrollViewer style -->
	<Style x:Key="GridViewScrollViewerStyleKey" TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ScrollViewer}">
					<ControlTemplate.Resources>
						<Storyboard x:Key="OnDisabled">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="DisabledBorder">
								<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="OnEnabled">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="DisabledBorder">
								<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*"/>
							<ColumnDefinition Width="Auto"/>
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto"/>
							<RowDefinition Height="*"/>
							<RowDefinition Height="Auto"/>
						</Grid.RowDefinitions>
						<Border x:Name="BaseBorder"
							Grid.ColumnSpan="2"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="0,0,0,1"/>
						<Border x:Name="DisabledBorder"
							Grid.ColumnSpan="2">
							<Border.Background>
								<SolidColorBrush Color="{StaticResource DisabledOverlay}" Opacity="0"/>
							</Border.Background>
						</Border>
						<Border
							Grid.ColumnSpan="2"
							BorderThickness="0,0,0,1">
							<ScrollViewer x:Name="HeaderScroll"
								Focusable="False"
								HorizontalScrollBarVisibility="Hidden"
								VerticalScrollBarVisibility="Hidden"
								PanningMode="HorizontalFirst">
								<GridViewHeaderRowPresenter
									AllowsColumnReorder="{Binding TemplatedParent.View.AllowsColumnReorder, RelativeSource={RelativeSource TemplatedParent}}"
									ColumnHeaderContainerStyle="{Binding TemplatedParent.View.ColumnHeaderContainerStyle, RelativeSource={RelativeSource TemplatedParent}}"
									ColumnHeaderContextMenu="{Binding TemplatedParent.View.ColumnHeaderContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
									ColumnHeaderTemplate="{Binding TemplatedParent.View.ColumnHeaderTemplate, RelativeSource={RelativeSource TemplatedParent}}"
									ColumnHeaderTemplateSelector="{Binding TemplatedParent.View.ColumnHeaderTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}"
									ColumnHeaderToolTip="{Binding TemplatedParent.View.ColumnHeaderToolTip, RelativeSource={RelativeSource TemplatedParent}}"
									Columns="{Binding TemplatedParent.View.Columns, RelativeSource={RelativeSource TemplatedParent}}"/>
							</ScrollViewer>
						</Border>

						<ScrollContentPresenter x:Name="PART_ScrollContentPresenter"
							KeyboardNavigation.DirectionalNavigation="Local"
							CanContentScroll="{TemplateBinding CanContentScroll}"
							Grid.RowSpan="2" Grid.Row="1" Grid.ColumnSpan="2"/>
						<ScrollBar x:Name="PART_HorizontalScrollBar"
							Grid.Row="2"
							Grid.Column="0"
							Grid.ColumnSpan="2"
							Orientation="Horizontal"
							Maximum="{TemplateBinding ScrollableWidth}"
							Value="{TemplateBinding HorizontalOffset}"
							ViewportSize="{TemplateBinding ViewportWidth}"
							Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
						<ScrollBar x:Name="PART_VerticalScrollBar"
							Grid.Row="1"
							Grid.RowSpan="2"
							Grid.Column="1"
							Orientation="Vertical"
							Maximum="{TemplateBinding ScrollableHeight}"
							Value="{TemplateBinding VerticalOffset}"
							ViewportSize="{TemplateBinding ViewportHeight}"
							Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True" SourceName="PART_HorizontalScrollBar">
							<Setter Property="Panel.ZIndex" TargetName="PART_HorizontalScrollBar" Value="1"/>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True" SourceName="PART_VerticalScrollBar">
							<Setter Property="Panel.ZIndex" TargetName="PART_VerticalScrollBar" Value="1"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource OnEnabled}"/>
							</Trigger.ExitActions>
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource OnDisabled}"/>
							</Trigger.EnterActions>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- ListView Thumb style -->
	<Style x:Key="GridViewColumnHeaderGripper" TargetType="{x:Type Thumb}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="Width" Value="15"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Border Background="Transparent">
						<Rectangle x:Name="Rect" Width="1" HorizontalAlignment="Center" Fill="{StaticResource NormalBdBrush}"/>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="Rect" Property="Fill" Value="{StaticResource TrackDarkBdBrush}"/>
							<Setter TargetName="Rect" Property="Width" Value="2"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- GridViewColumnHeader style -->
	<Style TargetType="{x:Type GridViewColumnHeader}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="Padding" Value="2,4"/>
		<Setter Property="HorizontalContentAlignment" Value="Center"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Style.Triggers>
			<Trigger Property="Role" Value="Normal">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
							<Grid>
								<VisualStateManager.VisualStateGroups>
									<VisualStateGroup x:Name="CommonStates">
										<VisualStateGroup.Transitions>
											<VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
											<VisualTransition From="MouseOver" GeneratedDuration="0:0:0.3"/>
											<VisualTransition GeneratedDuration="0" To="Pressed"/>
											<VisualTransition From="Pressed" GeneratedDuration="0:0:0.2"/>
											<VisualTransition GeneratedDuration="0:0:0.1" To="Disabled"/>
											<VisualTransition From="Disabled" GeneratedDuration="0:0:0.1"/>
										</VisualStateGroup.Transitions>
										<VisualState x:Name="Normal"/>
										<VisualState x:Name="MouseOver">
											<Storyboard>
												<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="HeaderBorder">
													<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
												</DoubleAnimationUsingKeyFrames>
												<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="HeaderContent">
													<EasingColorKeyFrame KeyTime="0" Value="{StaticResource OverFgColor}"/>
												</ColorAnimationUsingKeyFrames>
											</Storyboard>
										</VisualState>
										<VisualState x:Name="Pressed">
											<Storyboard>
												<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(SolidColorBrush.Color)" Storyboard.TargetName="HeaderBorder">
													<EasingColorKeyFrame KeyTime="0" Value="{StaticResource PressOverlay}"/>
												</ColorAnimationUsingKeyFrames>
												<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="HeaderBorder">
													<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
												</DoubleAnimationUsingKeyFrames>
												<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="HeaderContent">
													<EasingColorKeyFrame KeyTime="0" Value="{StaticResource OverFgColor}"/>
												</ColorAnimationUsingKeyFrames>
											</Storyboard>
										</VisualState>
										<VisualState x:Name="Disabled">
											<Storyboard>
												<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="HeaderContent">
													<EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledFgColor}"/>
												</ColorAnimationUsingKeyFrames>
											</Storyboard>
										</VisualState>
									</VisualStateGroup>
								</VisualStateManager.VisualStateGroups>
								<Border x:Name="BaseBorder"
									Background="Transparent"/>
								<Border x:Name="HeaderBorder"
									Padding="{TemplateBinding Padding}">
									<Border.Background>
										<SolidColorBrush Color="{StaticResource OverOverlay}" Opacity="0"/>
									</Border.Background>
									<ContentPresenter x:Name="HeaderContent"
										HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
										<TextElement.Foreground>
											<SolidColorBrush Color="{StaticResource NormalFgColor}"/>
										</TextElement.Foreground>
									</ContentPresenter>
								</Border>
								<Thumb x:Name="PART_HeaderGripper"
									HorizontalAlignment="Right"
									Margin="0,0,-7,0"
									Style="{StaticResource GridViewColumnHeaderGripper}"/>
							</Grid>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>
			<Trigger Property="Role" Value="Floating">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
							<Canvas x:Name="PART_FloatingHeaderCanvas">
								<Rectangle Width="{TemplateBinding ActualWidth}" Height="{TemplateBinding ActualHeight}" Fill="#60000000"/>
							</Canvas>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>
			<Trigger Property="Role" Value="Padding">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
							<Border Background="{StaticResource NormalBgBrush}"/>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>

	<!-- ListView style -->
	<Style TargetType="{x:Type ListView}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="Background" Value="{StaticResource TrackBgBrush}"/>
		<Setter Property="BorderBrush" Value="{StaticResource TrackBdBrush}"/>
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
		<Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
		<Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
		<Setter Property="VirtualizingPanel.VirtualizationMode" Value="Recycling"/>
		<Setter Property="VirtualizingPanel.ScrollUnit" Value="Pixel"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListView}">
					<ControlTemplate.Resources>
						<Storyboard x:Key="OnDisabled">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="DisabledBorder">
								<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
						<Storyboard x:Key="OnEnabled">
							<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="DisabledBorder">
								<EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
							</DoubleAnimationUsingKeyFrames>
						</Storyboard>
					</ControlTemplate.Resources>
					<Grid>
						<Border x:Name="BaseBorder"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							CornerRadius="1"/>
						<Border x:Name="DisabledBorder"
							CornerRadius="1.5">
							<Border.Background>
								<SolidColorBrush Color="{StaticResource DisabledOverlay}" Opacity="0"/>
							</Border.Background>
						</Border>
						<Border x:Name="Border"
							BorderThickness="{TemplateBinding BorderThickness}">
							<ScrollViewer x:Name="GridViewScroll"
								Focusable="False"
								Padding="{TemplateBinding Padding}"
								Style="{StaticResource GridViewScrollViewerStyleKey}">
								<ItemsPresenter />
							</ScrollViewer>
						</Border>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Trigger.ExitActions>
								<BeginStoryboard Storyboard="{StaticResource OnEnabled}"/>
							</Trigger.ExitActions>
							<Trigger.EnterActions>
								<BeginStoryboard Storyboard="{StaticResource OnDisabled}"/>
							</Trigger.EnterActions>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- ListViewItem style -->
	<Style TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource NoesisControlStyle}">
		<Setter Property="Padding" Value="2,4"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListViewItem}">
					<Grid Margin="0,0,0,1">
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CommonStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
									<VisualTransition From="MouseOver" GeneratedDuration="0:0:0.3"/>
									<VisualTransition GeneratedDuration="0:0:0.1" To="Disabled"/>
									<VisualTransition From="Disabled" GeneratedDuration="0:0:0.1"/>
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Normal"/>
								<VisualState x:Name="MouseOver">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="OverBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="ContentHost">
											<EasingColorKeyFrame KeyTime="0" Value="{StaticResource OverFgColor}"/>
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Disabled">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="DisabledBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(TextElement.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="ContentHost">
											<EasingColorKeyFrame KeyTime="0" Value="{StaticResource DisabledFgColor}"/>
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="SelectionStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0:0:0.1" To="Selected"/>
									<VisualTransition From="Selected" GeneratedDuration="0:0:0.3"/>
									<VisualTransition GeneratedDuration="0:0:0.1" To="SelectedUnfocused"/>
									<VisualTransition From="SelectedUnfocused" GeneratedDuration="0:0:0.3"/>
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Unselected"/>
								<VisualState x:Name="Selected">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="SelectBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="DisabledBorder">
											<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="SelectedUnfocused">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="SelectBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="0.8"/>
										</DoubleAnimationUsingKeyFrames>
										<ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="DisabledBorder">
											<DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
										</ObjectAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
							<VisualStateGroup x:Name="FocusStates">
								<VisualStateGroup.Transitions>
									<VisualTransition GeneratedDuration="0:0:0.1" To="Focused"/>
									<VisualTransition From="Focused" GeneratedDuration="0:0:0.3"/>
								</VisualStateGroup.Transitions>
								<VisualState x:Name="Unfocused"/>
								<VisualState x:Name="Focused">
									<Storyboard>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).(Brush.Opacity)" Storyboard.TargetName="FocusBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
										</DoubleAnimationUsingKeyFrames>
										<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Border.BorderBrush).(Brush.Opacity)" Storyboard.TargetName="FocusBorder">
											<EasingDoubleKeyFrame KeyTime="0" Value="1"/>
										</DoubleAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Border x:Name="OverBorder">
							<Border.Background>
								<SolidColorBrush Color="{StaticResource OverOverlay}" Opacity="0"/>
							</Border.Background>
						</Border>
						<Border x:Name="SelectBorder">
							<Border.Background>
								<SolidColorBrush Color="{StaticResource PressOverlay}" Opacity="0"/>
							</Border.Background>
						</Border>
						<Border x:Name="FocusBorder"
							BorderThickness="1">
							<Border.Background>
								<SolidColorBrush Color="{StaticResource FocusGlowColor}" Opacity="0"/>
							</Border.Background>
							<Border.BorderBrush>
								<SolidColorBrush Color="{StaticResource FocusShineColor}" Opacity="0"/>
							</Border.BorderBrush>
						</Border>
						<Border x:Name="DisabledBorder" Visibility="Collapsed">
							<Border.Background>
								<SolidColorBrush Color="{StaticResource DisabledOverlay}" Opacity="0"/>
							</Border.Background>
						</Border>
						<Border x:Name="Border"
							BorderThickness="1"
							Padding="{TemplateBinding Padding}">
							<GridViewRowPresenter x:Name="ContentHost"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
								<TextElement.Foreground>
									<SolidColorBrush Color="{StaticResource NormalFgColor}"/>
								</TextElement.Foreground>
							</GridViewRowPresenter>
						</Border>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>


	<!-- ========== HYPERLINK ============== -->

	<Style TargetType="{x:Type Hyperlink}">
		<Setter Property="Foreground" Value="{StaticResource LinkNormalBrush}" />
		<Setter Property="TextDecorations" Value="Underline" />
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Foreground" Value="{StaticResource LinkOverBrush}" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Foreground" Value="{StaticResource LinkDisabledBrush}" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="True">
				<Setter Property="Cursor" Value="Hand" />
			</Trigger>
		</Style.Triggers>
	</Style>

</ResourceDictionary>