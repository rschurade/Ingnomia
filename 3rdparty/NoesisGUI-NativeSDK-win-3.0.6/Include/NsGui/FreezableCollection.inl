////////////////////////////////////////////////////////////////////////////////////////////////////
// NoesisGUI - http://www.noesisengine.com
// Copyright (c) 2013 Noesis Technologies S.L. All Rights Reserved.
////////////////////////////////////////////////////////////////////////////////////////////////////


namespace Noesis
{

////////////////////////////////////////////////////////////////////////////////////////////////////
template<class T>
T* FreezableCollection<T>::Get(uint32_t index) const
{
    return (T*)BaseFreezableCollection::GetComponent(index).GetPtr();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
template<class T>
void FreezableCollection<T>::Set(uint32_t index, T* item)
{
    BaseFreezableCollection::Set(index, item);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
template<class T>
int FreezableCollection<T>::Add(T* item)
{
    return BaseFreezableCollection::Add(item);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
template<class T>
void FreezableCollection<T>::Insert(uint32_t index, T* item)
{
    BaseFreezableCollection::Insert(index, item);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
template<class T>
bool FreezableCollection<T>::Contains(T* item) const
{
    return BaseFreezableCollection::IndexOfComponent(item) >= 0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
template<class T>
int FreezableCollection<T>::IndexOf(T* item) const
{
    return BaseFreezableCollection::IndexOfComponent(item);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
template<class T>
bool FreezableCollection<T>::Remove(T* item)
{
    return BaseFreezableCollection::Remove(item);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
template<class T>
const TypeClass* FreezableCollection<T>::GetItemType() const
{
    static_assert(IsDerived<T, DependencyObject>::Result, "T must inherit from DependencyObject");
    return TypeOf<T>();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
template<class T>
Ptr<FreezableCollection<T>> FreezableCollection<T>::Clone() const
{
    return StaticPtrCast<FreezableCollection<T>>(Freezable::Clone());
}

////////////////////////////////////////////////////////////////////////////////////////////////////
template<class T>
Ptr<FreezableCollection<T>> FreezableCollection<T>::CloneCurrentValue() const
{
    return StaticPtrCast<FreezableCollection<T>>(Freezable::CloneCurrentValue());
}

////////////////////////////////////////////////////////////////////////////////////////////////////
template<class T>
Ptr<Freezable> FreezableCollection<T>::CreateInstanceCore() const
{
    return *new FreezableCollection<T>();
}

}
