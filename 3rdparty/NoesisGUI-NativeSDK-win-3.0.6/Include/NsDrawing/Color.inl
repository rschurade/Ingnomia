////////////////////////////////////////////////////////////////////////////////////////////////////
// NoesisGUI - http://www.noesisengine.com
// Copyright (c) 2013 Noesis Technologies S.L. All Rights Reserved.
////////////////////////////////////////////////////////////////////////////////////////////////////


#include <NsCore/Math.h>


namespace Noesis
{

////////////////////////////////////////////////////////////////////////////////////////////////////
inline Color::Color(): r(0.0f), g(0.0f), b(0.0f), a(1.0f)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline Color::Color(float rr, float gg, float bb, float aa): r(rr), g(gg), b(bb), a(aa)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline Color::Color(int rr, int gg, int bb, int aa): r(rr / 255.0f), g(gg / 255.0f), b(bb / 255.0f),
    a(aa / 255.0f)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline Color Color::FromPackedBGRA(uint32_t color)
{
    return Color(((color >> 16) & 255) / 255.0f, ((color >> 8) & 255) / 255.0f, 
        (color & 255) / 255.0f, (color >> 24) / 255.0f);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline Color Color::FromPackedRGBA(uint32_t color)
{
    return Color((color & 255) / 255.0f, ((color >> 8) & 255) / 255.0f, 
        ((color >> 16) & 255) / 255.0f, (color >> 24) / 255.0f);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline Color Color::FromLinearRGB(float r, float g, float b, float a)
{
    return Color(LinearToSRGB(r), LinearToSRGB(g), LinearToSRGB(b), a);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline uint32_t Color::GetPackedColorBGRA() const
{
    return Noesis::GetPackedColorBGRA(r, g, b, a);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline uint32_t Color::GetPackedColorRGBA() const
{
    return Noesis::GetPackedColorRGBA(r, g, b, a);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline bool Color::operator==(const Color& color) const
{
    return r == color.r && g == color.g && b == color.b && a == color.a;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline bool Color::operator!=(const Color& color) const
{
    return !(*this == color);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline Color Color::Black()
{
    return Color::FromPackedBGRA(0xFF000000);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline Color Color::Blue()
{
    return Color::FromPackedBGRA(0xFF0000FF);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline Color Color::Cyan()
{
    return Color::FromPackedBGRA(0xFF00FFFF);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline Color Color::DarkGray()
{
    return Color::FromPackedBGRA(0xFFA9A9A9);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline Color Color::Gray()
{
    return Color::FromPackedBGRA(0xFF808080);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline Color Color::Green()
{
    return Color::FromPackedBGRA(0xFF00FF00);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline Color Color::LightGray()
{
    return Color::FromPackedBGRA(0xFFD3D3D3);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline Color Color::Magenta()
{
    return Color::FromPackedBGRA(0xFFFF00FF);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline Color Color::Orange()
{
    return Color::FromPackedBGRA(0xFFFFA500);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline Color Color::Pink()
{
    return Color::FromPackedBGRA(0xFFFFC0CB);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline Color Color::Red()
{
    return Color::FromPackedBGRA(0xFFFF0000);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline Color Color::White()
{
    return Color::FromPackedBGRA(0xFFFFFFFF);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline Color Color::Yellow()
{
    return Color::FromPackedBGRA(0xFFFFFF00);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline float SRGBToLinear(float v_)
{
    // http://chilliant.blogspot.com/2012/08/srgb-approximations-for-hlsl.html
    float v = Clip(v_, 0.0f, 1.0f);
    return v * (v * (v * 0.305306011f + 0.682171111f) + 0.012522878f);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline float LinearToSRGB(float v_)
{
    // http://chilliant.blogspot.com/2012/08/srgb-approximations-for-hlsl.html
    float v = Clip(v_, 0.0f, 1.0f);
    float s1 = sqrtf(v);
    float s2 = sqrtf(s1);
    float s3 = sqrtf(s2);
    return Max(0.585122381f * s1 + 0.783140355f * s2 - 0.368262736f * s3, 0.0f);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline uint32_t GetPackedColorBGRA(float r, float g, float b, float a)
{
    uint32_t red = Clip(Trunc(r * 255.0f), 0, 255);
    uint32_t green = Clip(Trunc(g * 255.0f), 0, 255);
    uint32_t blue = Clip(Trunc(b * 255.0f), 0, 255);
    uint32_t alpha = Clip(Trunc(a * 255.0f), 0, 255);

    return (alpha << 24) | (red << 16) | (green << 8) | blue;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
inline uint32_t GetPackedColorRGBA(float r, float g, float b, float a)
{
    uint32_t red = Clip(Trunc(r * 255.0f), 0, 255);
    uint32_t green = Clip(Trunc(g * 255.0f), 0, 255);
    uint32_t blue = Clip(Trunc(b * 255.0f), 0, 255);
    uint32_t alpha = Clip(Trunc(a * 255.0f), 0, 255);

    return (alpha << 24) | (blue << 16) | (green << 8) | red;
}

}
